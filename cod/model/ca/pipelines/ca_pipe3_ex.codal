/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EXMEM)
{
    use alu_operate;
    use ex_output;
    use memory_operation;

    semantics
    {

        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the IDEX pipeline register
        switch (r_idex_src1_sl) {
            case ALU_SRC1_SEL_RF:
                s_src1_operand = r_idex_src1;
                break;
            
            case ALU_SRC1_EXMEM_DF:
                s_src1_operand = r_exmem_alu_result;
                break;
            
            case ALU_SRC1_MEM_DF:
                s_src1_operand = s_wb_value;
                break;

            case ALU_SRC1_SEL_ZERO:
                s_src1_operand = 0;
                break;

            case ALU_SRC1_SEL_PC:
                s_src1_operand = r_idex_pc;
                break;

            default:
                s_src1_operand = 0;
                break;
        }



        // Develop a multiplexer for the ALU src2 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the IDEX pipeline register
        switch(r_idex_src2_fwd) {
            case ALU_SRC2_SEL_RF:
                s_ex_wtdata = r_idex_src2;
                break;

            case ALU_SRC2_EXMEM_DF:
                s_ex_wtdata = r_exmem_alu_result;
                break;
            
            case ALU_SRC2_MEM_DF:
                s_ex_wtdata = s_wb_value; // maybe change back to mem_wb_data_result
                break;
            
            default:
                s_ex_wtdata = 0;
                break;
        }

        codasip_print(INFO_GENERAL, "EX: r_idex_pc=0x%x, r_idex_src2_fwd=0x%x, s_ex_wtdata=0x%x, r_idex_src2=0x%x, r_exmem_alu_result=0x%x, r_memwb_alu_result=0x%x\n",
         r_idex_pc, r_idex_src2_fwd, s_ex_wtdata, r_idex_src2, r_exmem_alu_result, r_memwb_alu_result);
        
        switch (r_idex_src2_sl) {
            case ALU_SRC2_SEL_RF:
                s_src2_operand = s_ex_wtdata;
                break;
            
            case ALU_SRC2_SEL_IMM:
                s_src2_operand = r_idex_src2_imm;
                break;

            default:
                s_src2_operand = 0;
                break;
        }


        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_idex_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();


        // call memory operation for load or store operation
        memory_operation();



        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EXMEM)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the IDEX pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from IDEX pipeline register for this switch 
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5

        uint1 p1, p2, p4, p8, p16, p32;
        uint6 s_ex_ecc;

        switch (r_idex_aluop) {
            case ALU_NOP:
                s_ex_alu_result = 0;
                break;
            
            case ALU_ADD:
                s_ex_alu_result = (int32) (s_src1_operand + s_src2_operand);
                break;

            case ALU_SUB:
                s_ex_alu_result = (int32) (s_src1_operand - s_src2_operand);
                break;

            case ALU_SLL:
                s_ex_alu_result = ((int32)s_src1_operand << (uint5) s_src2_operand);
                break;
            
            case ALU_SLT:
                s_ex_alu_result = (((int32) s_src1_operand) < ((int32) s_src2_operand)) ? 1 : 0;
                break;

            case ALU_SLTU:
                s_ex_alu_result = (((uint32) s_src1_operand) < ((uint32) s_src2_operand)) ? 1 : 0;
                break;

            case ALU_XOR:
                s_ex_alu_result = (int32) (s_src1_operand ^ s_src2_operand);
                break;

            case ALU_SRL:
                s_ex_alu_result = ((uint32) s_src1_operand >> (uint5) s_src2_operand);
                break;

            case ALU_SRA:
                s_ex_alu_result = ((int32) s_src1_operand) >> ((uint5) s_src2_operand);
                break;

            case ALU_OR:
                s_ex_alu_result = (int32) (s_src1_operand | s_src2_operand);
                break;

            case ALU_AND:
                s_ex_alu_result = (int32) (s_src1_operand & s_src2_operand);
                break;

            case ALU_ENC:
                // calculate the parity bits based on hammering code
                // p1 = d0 ^ d1 ^ d3 ^ d4 ^ d6 ^ d8 ^ d10 ^ d11 ^ d13 ^ d15 (10 bits)
                p1 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[6..6] ^ s_src1_operand[8..8] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[13..13] ^ s_src1_operand[15..15];

                // p2 = d0 ^ d2 ^ d3 ^ d5 ^ d6 ^ d9 ^ d10 ^ d12 ^ d13 (9 bits)
                p2 = s_src1_operand[0..0] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13];

                // p4 = d1 ^ d2 ^ d3 ^ d7 ^ d8 ^ d9 ^ d10 ^ d14 ^ d15 (9 bits)
                p4 = s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15];

                // p8 = d4 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 (7 bits)
                p8 = s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10];

                // p16 = d11 ^ d12 ^ d13 ^ d14 ^ d15 (5 bits)
                p16 = s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15];

                // p32 = d0 ^ d1 ^ d2 ^ d3 ^ d4 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 ^ d11 ^ d12 ^ d13 ^ d14 ^ d15
                p32 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ p1 ^ p2 ^ p4 ^ p8 ^ p16;

                // concatenate for result
                s_ex_alu_result = (int32) ((uint10)0 :: p1 :: p2 :: p4 :: p8 :: p16 :: p32 :: s_src1_operand[15..0]);
                break;

            case ALU_DEC:
                // calculate syndrome
                // calculate the parity bits based on hammering code
                // p1 = d0 ^ d1 ^ d3 ^ d4 ^ d6 ^ d8 ^ d10 ^ d11 ^ d13 ^ d15 ^ p1 (11 bits)
                p1 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[6..6] ^ s_src1_operand[8..8] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[13..13] ^ s_src1_operand[15..15] ^ s_src1_operand[21..21];

                // p2 = d0 ^ d2 ^ d3 ^ d5 ^ d6 ^ d9 ^ d10 ^ d12 ^ d13 ^ p2 (10 bits)
                p2 = s_src1_operand[0..0] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[20..20];

                // p4 = d1 ^ d2 ^ d3 ^ d7 ^ d8 ^ d9 ^ d10 ^ d14 ^ d15 ^ p4 (10 bits)
                p4 = s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ s_src1_operand[19..19];

                // p8 = d4 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 ^ p8 (8 bits)
                p8 = s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[18..18];

                // p16 = d11 ^ d12 ^ d13 ^ d14 ^ d15 ^ p16 (6 bits)
                p16 = s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ s_src1_operand[17..17];

                // p32 = d0 ^ d1 ^ d2 ^ d3 ^ d4 ^ d5 ^ d6 ^ d7 ^ d8 ^ d9 ^ d10 ^ d11 ^ d12 ^ d13 ^ d14 ^ d15 ^ p1 ^ p2 ^ p4 ^ p8 ^ p16 ^ p32
                p32 = s_src1_operand[0..0] ^ s_src1_operand[1..1] ^ s_src1_operand[2..2] ^ s_src1_operand[3..3] ^ s_src1_operand[4..4] ^ s_src1_operand[5..5] ^ s_src1_operand[6..6] ^ s_src1_operand[7..7] ^ s_src1_operand[8..8] ^ s_src1_operand[9..9] ^ s_src1_operand[10..10] ^ s_src1_operand[11..11] ^ s_src1_operand[12..12] ^ s_src1_operand[13..13] ^ s_src1_operand[14..14] ^ s_src1_operand[15..15] ^ s_src1_operand[16..16] ^ s_src1_operand[17..17] ^ s_src1_operand[18..18] ^ s_src1_operand[19..19] ^ s_src1_operand[20..20] ^ s_src1_operand[21..21];

                // concatenate for result
                s_ex_ecc = (int6) (p32 :: p16 :: p8 :: p4 :: p2 :: p1);

                switch (s_ex_ecc) {
                    case 0:
                        s_ex_alu_result = s_src1_operand & 0xFFFF;
                        break;

                    // parity bit flipped
                    case 32:
                    case 33:
                    case 34:
                    case 36:
                    case 40:
                    case 48:
                        s_ex_alu_result = (s_src1_operand & 0xFFFF) | 0x40000000;
                        break;
                    
                    // data bit flipped
                    case 35:
                        s_ex_alu_result = ((s_src1_operand ^ 0x1) & 0xFFFF) | 0x40000000;
                        break;

                    case 37:
                        s_ex_alu_result = ((s_src1_operand ^ 0x2) & 0xFFFF) | 0x40000000;
                        break;

                    case 38:
                        s_ex_alu_result = ((s_src1_operand ^ 0x4) & 0xFFFF) | 0x40000000;
                        break;

                    case 39:
                        s_ex_alu_result = ((s_src1_operand ^ 0x8) & 0xFFFF) | 0x40000000;
                        break;

                    case 41:
                        s_ex_alu_result = ((s_src1_operand ^ 0x10) & 0xFFFF) | 0x40000000;
                        break;

                    case 42:
                        s_ex_alu_result = ((s_src1_operand ^ 0x20) & 0xFFFF) | 0x40000000;
                        break;

                    case 43:
                        s_ex_alu_result = ((s_src1_operand ^ 0x40) & 0xFFFF) | 0x40000000;
                        break;

                    case 44:
                        s_ex_alu_result = ((s_src1_operand ^ 0x80) & 0xFFFF) | 0x40000000;
                        break;

                    case 45:
                        s_ex_alu_result = ((s_src1_operand ^ 0x100) & 0xFFFF) | 0x40000000;
                        break;

                    case 46:
                        s_ex_alu_result = ((s_src1_operand ^ 0x200) & 0xFFFF) | 0x40000000;
                        break;

                    case 47:
                        s_ex_alu_result = ((s_src1_operand ^ 0x400) & 0xFFFF) | 0x40000000;
                        break;

                    case 49:
                        s_ex_alu_result = ((s_src1_operand ^ 0x800) & 0xFFFF) | 0x40000000;
                        break;

                    case 50:
                        s_ex_alu_result = ((s_src1_operand ^ 0x1000) & 0xFFFF) | 0x40000000;
                        break;

                    case 51:
                        s_ex_alu_result = ((s_src1_operand ^ 0x2000) & 0xFFFF) | 0x40000000;
                        break;

                    case 52:
                        s_ex_alu_result = ((s_src1_operand ^ 0x4000) & 0xFFFF) | 0x40000000;
                        break;

                    case 53:
                        s_ex_alu_result = ((s_src1_operand ^ 0x8000) & 0xFFFF) | 0x40000000;
                        break;

                    default:
                        s_ex_alu_result = 0x80000000;
                        break;
                }


                break;

            default:
                s_ex_alu_result = 0;
                break;
        }

        // generation of s_ex_zero
        if(!s_ex_alu_result) {
            s_ex_zero = true;
        }
        else {
            s_ex_zero = false;
        }

        // mux to select between alu_result and PC+4 to write into the register file
        switch(r_idex_rfwtsel) {
            case WB_ALU:
                s_ex_branch_result = s_ex_alu_result;
                break;
            
            case WB_PC:
                s_ex_branch_result = r_idex_pc + 4;
                break;

            default:
                s_ex_branch_result = 0;
                break;
        }
        
        // mux to select the branch target calculation based on value of control signal
        if(r_idex_jump_inst){
            s_ex_target_address = s_ex_alu_result;
        }
        else {
            s_ex_target_address = r_idex_pc + r_idex_src2_imm;
        }
    };
};

event memory_operation : pipeline(pipe.EXMEM)
{
    semantics
    {
        uint1 op_rw;
        uint2 op_type;

                // MEM_SB,
                // MEM_SH,
                // MEM_SW,
                // MEM_LB,
                // MEM_LH,
                // MEM_LW,
                // MEM_LBU,
                // MEM_LHU
        switch (r_idex_mem_ops) {
            case MEM_SB:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_8;
                break;
            
            case MEM_SH:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_16;
                break;

            case MEM_SW:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_32;
                break;

            case MEM_LB:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_8;
                break;

            case MEM_LH:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_16;
                break;

            case MEM_LW:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_32;
                break;

            case MEM_LBU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_8;
                break;

            case MEM_LHU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_mem_size = CP_AHB_SIZE_16;
                break;

            default:
                op_rw = DONT_CARE;
                op_type = CP_AHB_IDLE;
                s_ex_mem_size = DONT_CARE;
                break;
        }

        codasip_print(INFO_GENERAL, "EX: r_idex_pc=0x%x, r_idex_mem_ops=0x%x, s_ex_wtdata=0x%x, s_ex_alu_result=0x%x\n",
        r_idex_pc, r_idex_mem_ops, s_ex_wtdata, s_ex_alu_result);

        ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size);
        s_ex_data_enc = ldst.encode_data(s_ex_wtdata, s_ex_alu_result, s_ex_mem_size);

    };
};

event ex_output : pipeline(pipe.EXMEM)
{
    semantics
    {
        // Store the ALU result to the EXMEM pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event
        r_exmem_alu_result = s_ex_branch_result;
        r_exmem_target_address = s_ex_target_address;
        r_exmem_zero = s_ex_zero;   
        r_exmem_wtdata = s_ex_wtdata;
        r_exmem_mem_size = s_ex_mem_size;     
        r_exmem_data_enc = s_ex_data_enc;

        // Passing control signals to the next stage, MEM, through the EXMEM pipeline register.  These
        // instruction decoder signals are being passed from the IDEX pipeline to the EXMEM pipeline.
        //
        // Assign the proper IDEX pipeline register to the following EXMEM pipeline registers.
        r_exmem_rd             =    r_idex_rd;
        r_exmem_regwrite       =    r_idex_regwrite;

        // Passing Decoder control-signals to the EX stage
        r_exmem_branch_inst = r_idex_branch_inst;
        r_exmem_jump_inst = r_idex_jump_inst;
        r_exmem_mem_ops = r_idex_mem_ops;
        r_exmem_memread = r_idex_memread;
        r_exmem_branchop = r_idex_branchop;
    };
};