/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe4_me.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Memory Stage
// -------------------------------------------------------------------------------------------------
event me : pipeline(pipe.MEMWB)
{
    use branch_logic;
    use me_output;

    semantics
    {
        uint1 data_ready, data_response;
        uint32 load_data, decoded_data;

        ldst.transport(CP_PHS_DATA, data_ready, data_response, load_data, r_exmem_data_enc);
        decoded_data = ldst.decode_data(load_data, r_exmem_alu_result, r_exmem_mem_size);


                // MEM_SB,
                // MEM_SH,
                // MEM_SW,
                // MEM_LB,
                // MEM_LH,
                // MEM_LW,
                // MEM_LBU,
                // MEM_LHU
        switch (r_exmem_mem_ops) {  
            case MEM_LB:
                s_mem_result = (int32)(int8) decoded_data;
                break;
            
            case MEM_LH:
                s_mem_result = (int32)(int16) decoded_data;
                break;
            
            case MEM_LW:
                s_mem_result = (int32) decoded_data;
                break;
            
            case MEM_LBU:
                s_mem_result = (uint32)(uint8) decoded_data;
                break;
            
            case MEM_LHU:
                s_mem_result = (uint32)(uint16) decoded_data;
                break;
            
            default:
                s_mem_result = decoded_data;
                break;
        }


        if(r_exmem_mem_ops != MEM_NOP && !data_response && !data_ready){
            s_mem_stall = true;
        }
        else {
            s_mem_stall = false;
        }
        
        branch_logic();
        // Update the pipeline registers between the Memory (MEM) and Write Back (WB) stages
        me_output();
    };
};

event branch_logic : pipeline(pipe.MEMWB)
{
    semantics
    {
        switch (r_exmem_branchop) {
            case BRANCH_COND_TRUE:
                s_me_take_branch = r_exmem_zero;
                break;
            
            case BRANCH_COND_FALSE:
                s_me_take_branch = !r_exmem_zero;
                break;

            case BRANCH_TRUE:
                s_me_take_branch = true;
                break;

            case BRANCH_FALSE:
                s_me_take_branch = false;
                break;

            default:
                s_me_take_branch = false;
                break;
        }
    };
};

event me_output : pipeline(pipe.MEMWB)
{
    semantics
    {
        // ALU result from the EXMEM pipeline register to pass along to the WB stage
        r_memwb_alu_result = r_exmem_alu_result;
        r_memwb_mem_result = s_mem_result;


        // Passing control signals to the next stage, WB, through the MEMWB pipeline register
        r_memwb_rd          = r_exmem_rd;
        r_memwb_regwrite    = r_exmem_regwrite;
        r_memwb_memread     = r_exmem_memread;
    };
};