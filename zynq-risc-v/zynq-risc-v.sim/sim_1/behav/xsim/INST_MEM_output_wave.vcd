$date
   Tue Apr 16 18:50:03 2024
$end

$version
  2023.2
  $dumpfile ("INST_MEM_output_wave.vcd") 
$end

$timescale
  1ps
$end

$scope module zybo_z7_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module dut $end
$var wire 1 # sysclk $end
$var wire 1 $ r_btn $end
$var wire 3 % btn [2:0] $end
$var wire 4 & sw [3:0] $end
$var wire 4 ' led [3:0] $end
$var wire 8 ( ja [7:0] $end
$var wire 8 ) jc [7:0] $end
$var wire 8 * jd [7:0] $end
$var wire 8 + je [7:0] $end
$var wire 1 , sdcard_pwr_n $end
$var wire 1 - sdclk $end
$var wire 1 . sdcmd $end
$var wire 1 / sddat0 $end
$var wire 1 0 sddat1 $end
$var wire 1 1 sddat2 $end
$var wire 1 2 sddat $end
$var wire 4 3 card_status [3:0] $end
$var wire 2 4 card_type [1:0] $end
$var wire 2 5 filesystem_type [1:0] $end
$var wire 1 6 file_found $end
$var reg 32 7 current_instr [31:0] $end
$var reg 32 8 instr_index [31:0] $end
$var reg 32 9 read_index [31:0] $end
$var reg 32 : pc [31:0] $end
$var reg 2 ; state [1:0] $end
$var reg 1 < reg_inst_write_sel $end
$var reg 2 = inst_trans [1:0] $end
$var reg 1 > rst $end
$var reg 4 ? rst_counter [3:0] $end
$var wire 32 @ inst_rdata [31:0] $end
$var wire 1 A inst_ready $end
$var wire 1 B inst_resp $end
$var wire 3 C inst_burst [2:0] $end
$var wire 4 D inst_prot [3:0] $end
$var wire 3 E inst_size [2:0] $end
$var wire 32 F inst_write [31:0] $end
$var wire 1 G inst_mast_lock $end
$var wire 32 H inst_addr_out [31:0] $end
$var wire 32 I inst_addr_in [31:0] $end
$var wire 1 J inst_write_sel_out $end
$var wire 1 K inst_write_sel_in $end
$var wire 2 L inst_trans_in [1:0] $end
$var wire 2 M inst_trans_out [1:0] $end
$var wire 32 N mem_read_data [31:0] $end
$var wire 32 O mem_write_data [31:0] $end
$var wire 32 P mem_addr [31:0] $end
$var wire 1 Q mem_ready $end
$var wire 1 R mem_resp $end
$var wire 3 S mem_burst [2:0] $end
$var wire 4 T mem_prot [3:0] $end
$var wire 3 U mem_size [2:0] $end
$var wire 1 V mem_mast_lock $end
$var wire 1 W mem_write_sel $end
$var wire 2 X mem_trans [1:0] $end
$var reg 4 Y led_reg [3:0] $end
$var wire 1 Z outen $end
$var wire 8 [ outbyte [7:0] $end
$var reg 32 \ buffer [31:0] $end
$var reg 3 ] byte_count [2:0] $end
$var reg 1 ^ file_done $end
$var wire 1 _ sdcard_pwr_on $end
$var wire 1 ` sddat3 $end
$scope module u_sd_file_reader $end
$var wire 1 a rstn $end
$var wire 1 # clk $end
$var wire 1 - sdclk $end
$var wire 1 . sdcmd $end
$var wire 1 / sddat0 $end
$var wire 4 3 card_stat [3:0] $end
$var wire 2 4 card_type [1:0] $end
$var wire 2 5 filesystem_type [1:0] $end
$var reg 1 b file_found $end
$var reg 1 c outen $end
$var reg 8 d outbyte [7:0] $end
$var wire 416 e FILE_NAME_UPPER [415:0] $end
$var reg 1 f read_start $end
$var reg 32 g read_sector_no [31:0] $end
$var wire 1 h read_done $end
$var wire 1 i rvalid $end
$var wire 9 j raddr [8:0] $end
$var wire 8 k rdata [7:0] $end
$var reg 32 l rootdir_sector [31:0] $end
$var reg 32 m rootdir_sector_t [31:0] $end
$var reg 16 n rootdir_sectorcount [15:0] $end
$var reg 16 o rootdir_sectorcount_t [15:0] $end
$var reg 32 p curr_cluster [31:0] $end
$var reg 32 q curr_cluster_t [31:0] $end
$var wire 7 r curr_cluster_fat_offset [6:0] $end
$var wire 25 s curr_cluster_fat_no [24:0] $end
$var wire 8 t curr_cluster_fat_offset_fat16 [7:0] $end
$var wire 24 u curr_cluster_fat_no_fat16 [23:0] $end
$var reg 32 v target_cluster [31:0] $end
$var reg 16 w target_cluster_fat16 [15:0] $end
$var reg 8 x cluster_sector_offset [7:0] $end
$var reg 8 y cluster_sector_offset_t [7:0] $end
$var reg 32 z file_cluster [31:0] $end
$var reg 32 { file_size [31:0] $end
$var reg 8 | cluster_size [7:0] $end
$var reg 8 } cluster_size_t [7:0] $end
$var reg 32 ~ first_fat_sector_no [31:0] $end
$var reg 32 !! first_fat_sector_no_t [31:0] $end
$var reg 32 "! first_data_sector_no [31:0] $end
$var reg 32 #! first_data_sector_no_t [31:0] $end
$var reg 1 $! search_fat $end
$var reg 3 %! filesystem_state [2:0] $end
$var reg 2 &! filesystem [1:0] $end
$var reg 2 '! filesystem_parsed [1:0] $end
$var integer 32 (! ii [31:0] $end
$var integer 32 )! i [31:0] $end
$var wire 1 *! is_boot_sector $end
$var wire 1 +! is_dbr $end
$var wire 32 ,! dbr_sector_no [31:0] $end
$var wire 16 -! bytes_per_sector [15:0] $end
$var wire 8 .! sector_per_cluster [7:0] $end
$var wire 16 /! resv_sectors [15:0] $end
$var wire 8 0! number_of_fat [7:0] $end
$var wire 16 1! rootdir_itemcount [15:0] $end
$var reg 32 2! sectors_per_fat [31:0] $end
$var reg 32 3! root_cluster [31:0] $end
$var reg 1 4! fready $end
$var reg 8 5! fnamelen [7:0] $end
$var reg 16 6! fcluster [15:0] $end
$var reg 32 7! fsize [31:0] $end
$var reg 1 8! isshort $end
$var reg 1 9! islongok $end
$var reg 1 :! islong $end
$var reg 1 ;! longvalid $end
$var reg 1 <! isshort_t $end
$var reg 1 =! islongok_t $end
$var reg 1 >! islong_t $end
$var reg 1 ?! longvalid_t $end
$var reg 6 @! longno [5:0] $end
$var reg 6 A! longno_t [5:0] $end
$var reg 8 B! lastchar [7:0] $end
$var reg 8 C! fdtnamelen [7:0] $end
$var reg 8 D! fdtnamelen_t [7:0] $end
$var reg 8 E! sdtnamelen [7:0] $end
$var reg 8 F! sdtnamelen_t [7:0] $end
$var reg 8 G! file_namelen [7:0] $end
$var reg 16 H! file_1st_cluster [15:0] $end
$var reg 16 I! file_1st_cluster_t [15:0] $end
$var reg 32 J! file_1st_size [31:0] $end
$var reg 32 K! file_1st_size_t [31:0] $end
$var reg 32 L! fptr [31:0] $end
$scope module u_sd_reader $end
$var wire 1 a rstn $end
$var wire 1 # clk $end
$var wire 1 - sdclk $end
$var wire 1 . sdcmd $end
$var wire 1 / sddat0 $end
$var wire 4 3 card_stat [3:0] $end
$var reg 2 M! card_type [1:0] $end
$var wire 1 N! rstart $end
$var wire 32 O! rsector [31:0] $end
$var wire 1 P! rbusy $end
$var wire 1 h rdone $end
$var reg 1 Q! outen $end
$var reg 9 R! outaddr [8:0] $end
$var reg 8 S! outbyte [7:0] $end
$var reg 1 T! start $end
$var reg 16 U! precnt [15:0] $end
$var reg 6 V! cmd [5:0] $end
$var reg 32 W! arg [31:0] $end
$var reg 16 X! clkdiv [15:0] $end
$var reg 32 Y! rsectoraddr [31:0] $end
$var wire 1 Z! busy $end
$var wire 1 [! done $end
$var wire 1 \! timeout $end
$var wire 1 ]! syntaxe $end
$var wire 32 ^! resparg [31:0] $end
$var reg 1 _! sdv1_maybe $end
$var reg 3 `! cmd8_cnt [2:0] $end
$var reg 16 a! rca [15:0] $end
$var reg 4 b! sdcmd_stat [3:0] $end
$var reg 1 c! sdclkl $end
$var reg 3 d! sddat_stat [2:0] $end
$var reg 32 e! ridx [31:0] $end
$scope module u_sdcmd_ctrl $end
$var wire 1 a rstn $end
$var wire 1 # clk $end
$var reg 1 f! sdclk $end
$var wire 1 . sdcmd $end
$var wire 16 g! clkdiv [15:0] $end
$var wire 1 h! start $end
$var wire 16 i! precnt [15:0] $end
$var wire 6 j! cmd [5:0] $end
$var wire 32 k! arg [31:0] $end
$var reg 1 l! busy $end
$var reg 1 m! done $end
$var reg 1 n! timeout $end
$var reg 1 o! syntaxe $end
$var wire 32 ^! resparg [31:0] $end
$var reg 1 p! sdcmdoe $end
$var reg 1 q! sdcmdout $end
$var wire 1 r! sdcmdin $end
$var reg 6 s! req_cmd [5:0] $end
$var reg 32 t! req_arg [31:0] $end
$var reg 7 u! req_crc [6:0] $end
$var wire 52 v! request [51:0] $end
$var reg 1 w! resp_st $end
$var reg 6 x! resp_cmd [5:0] $end
$var reg 32 y! resp_arg [31:0] $end
$var reg 18 z! clkdivr [17:0] $end
$var reg 18 {! clkcnt [17:0] $end
$var reg 16 |! cnt1 [15:0] $end
$var reg 6 }! cnt2 [5:0] $end
$var reg 8 ~! cnt3 [7:0] $end
$var reg 8 !" cnt4 [7:0] $end
$scope function CalcCrc7 $end
$var reg 7 "" CalcCrc7 [6:0] $end
$var reg 7 #" crc [6:0] $end
$var reg 1 $" inbit [0:0] $end
$upscope $end
$upscope $end
$scope task set_cmd $end
$var reg 1 %" _start [0:0] $end
$var reg 16 &" _precnt [15:0] $end
$var reg 6 '" _cmd [5:0] $end
$var reg 32 (" _arg [31:0] $end
$upscope $end
$upscope $end
$scope function toUpperCase $end
$var reg 8 )" toUpperCase [7:0] $end
$var reg 8 *" in [7:0] $end
$upscope $end
$upscope $end
$scope module cpu $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 32 @ if_code_HRDATA [31:0] $end
$var wire 1 A if_code_HREADY $end
$var wire 1 B if_code_HRESP $end
$var wire 32 N ldst_HRDATA [31:0] $end
$var wire 1 Q ldst_HREADY $end
$var wire 1 R ldst_HRESP $end
$var wire 32 H if_code_HADDR [31:0] $end
$var wire 3 C if_code_HBURST [2:0] $end
$var wire 1 G if_code_HMASTLOCK $end
$var wire 4 D if_code_HPROT [3:0] $end
$var wire 3 E if_code_HSIZE [2:0] $end
$var wire 2 M if_code_HTRANS [1:0] $end
$var wire 1 J if_code_HWRITE $end
$var wire 32 P ldst_HADDR [31:0] $end
$var wire 3 S ldst_HBURST [2:0] $end
$var wire 1 V ldst_HMASTLOCK $end
$var wire 4 T ldst_HPROT [3:0] $end
$var wire 3 U ldst_HSIZE [2:0] $end
$var wire 2 X ldst_HTRANS [1:0] $end
$var wire 32 O ldst_HWDATA [31:0] $end
$var wire 1 W ldst_HWRITE $end
$scope module ecen5593_startercode $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 32 @ if_code_HRDATA [31:0] $end
$var wire 1 A if_code_HREADY $end
$var wire 1 B if_code_HRESP $end
$var wire 32 N ldst_HRDATA [31:0] $end
$var wire 1 Q ldst_HREADY $end
$var wire 1 R ldst_HRESP $end
$var wire 32 H if_code_HADDR [31:0] $end
$var wire 3 C if_code_HBURST [2:0] $end
$var wire 1 G if_code_HMASTLOCK $end
$var wire 4 D if_code_HPROT [3:0] $end
$var wire 3 E if_code_HSIZE [2:0] $end
$var wire 2 M if_code_HTRANS [1:0] $end
$var wire 1 J if_code_HWRITE $end
$var wire 32 P ldst_HADDR [31:0] $end
$var wire 3 S ldst_HBURST [2:0] $end
$var wire 1 V ldst_HMASTLOCK $end
$var wire 4 T ldst_HPROT [3:0] $end
$var wire 3 U ldst_HSIZE [2:0] $end
$var wire 2 X ldst_HTRANS [1:0] $end
$var wire 32 O ldst_HWDATA [31:0] $end
$var wire 1 W ldst_HWRITE $end
$var wire 1 ," codasip_halt_wire $end
$var wire 32 -" core_if_code_HADDR_wire [31:0] $end
$var wire 3 ." core_if_code_HBURST_wire [2:0] $end
$var wire 1 /" core_if_code_HMASTLOCK_wire $end
$var wire 4 0" core_if_code_HPROT_wire [3:0] $end
$var wire 3 1" core_if_code_HSIZE_wire [2:0] $end
$var wire 2 2" core_if_code_HTRANS_wire [1:0] $end
$var wire 1 3" core_if_code_HWRITE_wire $end
$var wire 1 4" if_code_HREADY_wire $end
$var wire 1 5" if_code_HRESP_wire $end
$var wire 32 6" if_code_HRDATA_wire [31:0] $end
$var wire 32 7" core_ldst_HADDR_wire [31:0] $end
$var wire 3 8" core_ldst_HBURST_wire [2:0] $end
$var wire 1 9" core_ldst_HMASTLOCK_wire $end
$var wire 4 :" core_ldst_HPROT_wire [3:0] $end
$var wire 3 ;" core_ldst_HSIZE_wire [2:0] $end
$var wire 2 <" core_ldst_HTRANS_wire [1:0] $end
$var wire 1 =" core_ldst_HWRITE_wire $end
$var wire 32 >" core_ldst_HWDATA_wire [31:0] $end
$var wire 1 ?" ldst_HREADY_wire $end
$var wire 1 @" ldst_HRESP_wire $end
$var wire 32 A" ldst_HRDATA_wire [31:0] $end
$scope module if_code $end
$var wire 1 A if_code_HREADY $end
$var wire 1 B if_code_HRESP $end
$var wire 32 @ if_code_HRDATA [31:0] $end
$var wire 32 -" HADDR [31:0] $end
$var wire 3 ." HBURST [2:0] $end
$var wire 1 /" HMASTLOCK $end
$var wire 4 0" HPROT [3:0] $end
$var wire 3 1" HSIZE [2:0] $end
$var wire 2 2" HTRANS [1:0] $end
$var wire 1 3" HWRITE $end
$var wire 32 H if_code_HADDR [31:0] $end
$var wire 3 C if_code_HBURST [2:0] $end
$var wire 1 G if_code_HMASTLOCK $end
$var wire 4 D if_code_HPROT [3:0] $end
$var wire 3 E if_code_HSIZE [2:0] $end
$var wire 2 M if_code_HTRANS [1:0] $end
$var wire 1 J if_code_HWRITE $end
$var wire 1 4" HREADY $end
$var wire 1 5" HRESP $end
$var wire 32 6" HRDATA [31:0] $end
$upscope $end
$scope module ldst $end
$var wire 1 Q ldst_HREADY $end
$var wire 1 R ldst_HRESP $end
$var wire 32 N ldst_HRDATA [31:0] $end
$var wire 32 7" HADDR [31:0] $end
$var wire 3 8" HBURST [2:0] $end
$var wire 1 9" HMASTLOCK $end
$var wire 4 :" HPROT [3:0] $end
$var wire 3 ;" HSIZE [2:0] $end
$var wire 2 <" HTRANS [1:0] $end
$var wire 1 =" HWRITE $end
$var wire 32 >" HWDATA [31:0] $end
$var wire 32 P ldst_HADDR [31:0] $end
$var wire 3 S ldst_HBURST [2:0] $end
$var wire 1 V ldst_HMASTLOCK $end
$var wire 4 T ldst_HPROT [3:0] $end
$var wire 3 U ldst_HSIZE [2:0] $end
$var wire 2 X ldst_HTRANS [1:0] $end
$var wire 1 W ldst_HWRITE $end
$var wire 32 O ldst_HWDATA [31:0] $end
$var wire 1 ?" HREADY $end
$var wire 1 @" HRESP $end
$var wire 32 A" HRDATA [31:0] $end
$upscope $end
$scope module core $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 32 6" if_code_HRDATA [31:0] $end
$var wire 1 4" if_code_HREADY $end
$var wire 1 5" if_code_HRESP $end
$var wire 32 A" ldst_HRDATA [31:0] $end
$var wire 1 ?" ldst_HREADY $end
$var wire 1 @" ldst_HRESP $end
$var wire 32 -" if_code_HADDR [31:0] $end
$var wire 3 ." if_code_HBURST [2:0] $end
$var wire 1 /" if_code_HMASTLOCK $end
$var wire 4 0" if_code_HPROT [3:0] $end
$var wire 3 1" if_code_HSIZE [2:0] $end
$var wire 2 2" if_code_HTRANS [1:0] $end
$var wire 1 3" if_code_HWRITE $end
$var wire 32 7" ldst_HADDR [31:0] $end
$var wire 3 8" ldst_HBURST [2:0] $end
$var wire 1 9" ldst_HMASTLOCK $end
$var wire 4 :" ldst_HPROT [3:0] $end
$var wire 3 ;" ldst_HSIZE [2:0] $end
$var wire 2 <" ldst_HTRANS [1:0] $end
$var wire 32 >" ldst_HWDATA [31:0] $end
$var wire 1 =" ldst_HWRITE $end
$var wire 32 B" s_if_nextpc [31:0] $end
$var wire 32 C" s_if_pcin [31:0] $end
$var wire 32 D" s_id_instr [31:0] $end
$var wire 17 E" s_id_opc [16:0] $end
$var wire 4 F" s_id_aluop [3:0] $end
$var wire 2 G" s_id_alusrc1 [1:0] $end
$var wire 1 H" s_id_alusrc2 $end
$var wire 1 I" s_id_regwrite $end
$var wire 2 J" s_id_rfwtsel [1:0] $end
$var wire 3 K" s_id_brnchop [2:0] $end
$var wire 1 L" s_id_brnchsel $end
$var wire 4 M" s_id_memop [3:0] $end
$var wire 3 N" s_id_immsel [2:0] $end
$var wire 5 O" s_id_rs1 [4:0] $end
$var wire 5 P" s_id_rs2 [4:0] $end
$var wire 5 Q" s_id_rd [4:0] $end
$var wire 32 R" s_id_immed [31:0] $end
$var wire 32 S" s_id_immedi [31:0] $end
$var wire 32 T" s_id_immedb [31:0] $end
$var wire 32 U" s_id_immedu [31:0] $end
$var wire 32 V" s_id_immeds [31:0] $end
$var wire 32 W" s_id_immedj [31:0] $end
$var wire 32 X" s_id_reg1 [31:0] $end
$var wire 32 Y" s_id_reg2 [31:0] $end
$var wire 32 Z" s_id_rf1 [31:0] $end
$var wire 32 [" s_id_rf2 [31:0] $end
$var wire 1 \" s_id_fwdA $end
$var wire 1 ]" s_id_fwdB $end
$var wire 1 ^" s_id_loadhaz $end
$var wire 32 _" s_ex_src1 [31:0] $end
$var wire 32 `" s_ex_src2 [31:0] $end
$var wire 32 a" s_ex_alu [31:0] $end
$var wire 1 b" s_ex_zero $end
$var wire 32 c" s_ex_fwd1 [31:0] $end
$var wire 32 d" s_ex_fwd2 [31:0] $end
$var wire 2 e" s_ex_fwdA [1:0] $end
$var wire 2 f" s_ex_fwdB [1:0] $end
$var wire 32 g" s_ex_bradd [31:0] $end
$var wire 32 h" s_ex_brimm [31:0] $end
$var wire 2 i" s_ex_memsize [1:0] $end
$var wire 32 j" s_ex_encoded_data [31:0] $end
$var wire 1 k" s_ex_fast_zero $end
$var wire 1 l" s_ex_take_branch $end
$var wire 32 m" s_me_decoded_data [31:0] $end
$var wire 32 n" s_me_mem_result [31:0] $end
$var wire 1 o" s_me_pcsrc $end
$var wire 32 p" s_wb_pc4 [31:0] $end
$var wire 32 q" s_wb_result [31:0] $end
$var wire 1 r" s_id_stall $end
$var wire 1 s" s_id_clear $end
$var wire 1 t" s_ex_stall $end
$var wire 1 u" s_ex_clear $end
$var wire 1 v" s_me_stall $end
$var wire 1 w" s_me_clear $end
$var wire 1 x" s_wb_stall $end
$var wire 1 y" s_wb_clear $end
$var wire 1 z" pipe_ID_CLEAR_Q_wire $end
$var wire 1 {" pipe_ID_STALL_Q_wire $end
$var wire 1 |" r_id_pc_WE_wire $end
$var wire 1 }" if_output_r_id_pc_WE_wire $end
$var wire 1 ~" id_r_id_pc_WE_wire $end
$var wire 32 !# r_id_pc_D_wire [31:0] $end
$var wire 32 "# if_output_r_id_pc_D_wire [31:0] $end
$var wire 32 ## id_r_id_pc_D_wire [31:0] $end
$var wire 32 $# r_id_pc_Q_wire [31:0] $end
$var wire 1 %# id_output_r_id_instr_preserved_WE_wire $end
$var wire 32 &# id_output_r_id_instr_preserved_D_wire [31:0] $end
$var wire 32 '# r_id_instr_preserved_Q_wire [31:0] $end
$var wire 1 (# id_output_r_id_pc_preserved_WE_wire $end
$var wire 32 )# id_output_r_id_pc_preserved_D_wire [31:0] $end
$var wire 32 *# r_id_pc_preserved_Q_wire [31:0] $end
$var wire 1 +# pipe_EX_CLEAR_Q_wire $end
$var wire 1 ,# pipe_EX_STALL_Q_wire $end
$var wire 1 -# id_output_r_ex_pc_WE_wire $end
$var wire 32 .# id_output_r_ex_pc_D_wire [31:0] $end
$var wire 32 /# r_ex_pc_Q_wire [31:0] $end
$var wire 1 0# id_output_r_ex_aluop_WE_wire $end
$var wire 4 1# id_output_r_ex_aluop_D_wire [3:0] $end
$var wire 4 2# r_ex_aluop_Q_wire [3:0] $end
$var wire 1 3# id_output_r_ex_alusrc1_WE_wire $end
$var wire 2 4# id_output_r_ex_alusrc1_D_wire [1:0] $end
$var wire 2 5# r_ex_alusrc1_Q_wire [1:0] $end
$var wire 1 6# id_output_r_ex_alusrc2_WE_wire $end
$var wire 1 7# id_output_r_ex_alusrc2_D_wire $end
$var wire 1 8# r_ex_alusrc2_Q_wire $end
$var wire 1 9# id_output_r_ex_regwrite_WE_wire $end
$var wire 1 :# id_output_r_ex_regwrite_D_wire $end
$var wire 1 ;# r_ex_regwrite_Q_wire $end
$var wire 1 <# id_output_r_ex_rfwtsel_WE_wire $end
$var wire 2 =# id_output_r_ex_rfwtsel_D_wire [1:0] $end
$var wire 2 ># r_ex_rfwtsel_Q_wire [1:0] $end
$var wire 1 ?# id_output_r_ex_brnchop_WE_wire $end
$var wire 3 @# id_output_r_ex_brnchop_D_wire [2:0] $end
$var wire 3 A# r_ex_brnchop_Q_wire [2:0] $end
$var wire 1 B# id_output_r_ex_brnchsel_WE_wire $end
$var wire 1 C# id_output_r_ex_brnchsel_D_wire $end
$var wire 1 D# r_ex_brnchsel_Q_wire $end
$var wire 1 E# id_output_r_ex_memop_WE_wire $end
$var wire 4 F# id_output_r_ex_memop_D_wire [3:0] $end
$var wire 4 G# r_ex_memop_Q_wire [3:0] $end
$var wire 1 H# id_output_r_ex_rd_WE_wire $end
$var wire 5 I# id_output_r_ex_rd_D_wire [4:0] $end
$var wire 5 J# r_ex_rd_Q_wire [4:0] $end
$var wire 1 K# id_output_r_ex_rs1_WE_wire $end
$var wire 5 L# id_output_r_ex_rs1_D_wire [4:0] $end
$var wire 5 M# r_ex_rs1_Q_wire [4:0] $end
$var wire 1 N# id_output_r_ex_rs2_WE_wire $end
$var wire 5 O# id_output_r_ex_rs2_D_wire [4:0] $end
$var wire 5 P# r_ex_rs2_Q_wire [4:0] $end
$var wire 1 Q# id_output_r_ex_immed_WE_wire $end
$var wire 32 R# id_output_r_ex_immed_D_wire [31:0] $end
$var wire 32 S# r_ex_immed_Q_wire [31:0] $end
$var wire 1 T# id_output_r_ex_reg1_WE_wire $end
$var wire 32 U# id_output_r_ex_reg1_D_wire [31:0] $end
$var wire 32 V# r_ex_reg1_Q_wire [31:0] $end
$var wire 1 W# id_output_r_ex_reg2_WE_wire $end
$var wire 32 X# id_output_r_ex_reg2_D_wire [31:0] $end
$var wire 32 Y# r_ex_reg2_Q_wire [31:0] $end
$var wire 1 Z# pipe_ME_CLEAR_Q_wire $end
$var wire 1 [# pipe_ME_STALL_Q_wire $end
$var wire 1 \# ex_output_r_me_pc_WE_wire $end
$var wire 32 ]# ex_output_r_me_pc_D_wire [31:0] $end
$var wire 32 ^# r_me_pc_Q_wire [31:0] $end
$var wire 1 _# ex_output_r_me_regwrite_WE_wire $end
$var wire 1 `# ex_output_r_me_regwrite_D_wire $end
$var wire 1 a# r_me_regwrite_Q_wire $end
$var wire 1 b# ex_output_r_me_rfwtsel_WE_wire $end
$var wire 2 c# ex_output_r_me_rfwtsel_D_wire [1:0] $end
$var wire 2 d# r_me_rfwtsel_Q_wire [1:0] $end
$var wire 1 e# ex_output_r_me_rd_WE_wire $end
$var wire 5 f# ex_output_r_me_rd_D_wire [4:0] $end
$var wire 5 g# r_me_rd_Q_wire [4:0] $end
$var wire 1 h# ex_output_r_me_memop_WE_wire $end
$var wire 4 i# ex_output_r_me_memop_D_wire [3:0] $end
$var wire 4 j# r_me_memop_Q_wire [3:0] $end
$var wire 1 k# ex_output_r_me_alu_WE_wire $end
$var wire 32 l# ex_output_r_me_alu_D_wire [31:0] $end
$var wire 32 m# r_me_alu_Q_wire [31:0] $end
$var wire 1 n# ex_output_r_me_zero_WE_wire $end
$var wire 1 o# ex_output_r_me_zero_D_wire $end
$var wire 1 p# r_me_zero_Q_wire $end
$var wire 1 q# ex_output_r_me_wtdat_WE_wire $end
$var wire 32 r# ex_output_r_me_wtdat_D_wire [31:0] $end
$var wire 32 s# r_me_wtdat_Q_wire [31:0] $end
$var wire 1 t# ex_output_r_me_brnchop_WE_wire $end
$var wire 3 u# ex_output_r_me_brnchop_D_wire [2:0] $end
$var wire 3 v# r_me_brnchop_Q_wire [2:0] $end
$var wire 1 w# ex_output_r_me_bradd_WE_wire $end
$var wire 32 x# ex_output_r_me_bradd_D_wire [31:0] $end
$var wire 32 y# r_me_bradd_Q_wire [31:0] $end
$var wire 1 z# pipe_WB_CLEAR_Q_wire $end
$var wire 1 {# pipe_WB_STALL_Q_wire $end
$var wire 1 |# me_output_r_wb_pc_WE_wire $end
$var wire 32 }# me_output_r_wb_pc_D_wire [31:0] $end
$var wire 32 ~# r_wb_pc_Q_wire [31:0] $end
$var wire 1 !$ me_output_r_wb_regwrite_WE_wire $end
$var wire 1 "$ me_output_r_wb_regwrite_D_wire $end
$var wire 1 #$ r_wb_regwrite_Q_wire $end
$var wire 1 $$ me_output_r_wb_rfwtsel_WE_wire $end
$var wire 2 %$ me_output_r_wb_rfwtsel_D_wire [1:0] $end
$var wire 2 &$ r_wb_rfwtsel_Q_wire [1:0] $end
$var wire 1 '$ me_output_r_wb_rd_WE_wire $end
$var wire 5 ($ me_output_r_wb_rd_D_wire [4:0] $end
$var wire 5 )$ r_wb_rd_Q_wire [4:0] $end
$var wire 1 *$ me_output_r_wb_memdat_WE_wire $end
$var wire 32 +$ me_output_r_wb_memdat_D_wire [31:0] $end
$var wire 32 ,$ r_wb_memdat_Q_wire [31:0] $end
$var wire 1 -$ me_output_r_wb_alu_WE_wire $end
$var wire 32 .$ me_output_r_wb_alu_D_wire [31:0] $end
$var wire 32 /$ r_wb_alu_Q_wire [31:0] $end
$var wire 1 0$ if_output_r_id_clear_WE_wire $end
$var wire 1 1$ if_output_r_id_clear_D_wire $end
$var wire 1 2$ r_id_clear_Q_wire $end
$var wire 1 3$ if_output_r_id_stall_WE_wire $end
$var wire 1 4$ if_output_r_id_stall_D_wire $end
$var wire 1 5$ r_id_stall_Q_wire $end
$var wire 1 6$ r_pc_WE_wire $end
$var wire 1 7$ reset_r_pc_WE_wire $end
$var wire 1 8$ if_output_r_pc_WE_wire $end
$var wire 32 9$ r_pc_D_wire [31:0] $end
$var wire 32 :$ reset_r_pc_D_wire [31:0] $end
$var wire 32 ;$ if_output_r_pc_D_wire [31:0] $end
$var wire 32 <$ r_pc_Q_wire [31:0] $end
$var wire 1 =$ id_rf_xpr_src1_RE_wire $end
$var wire 5 >$ id_rf_xpr_src1_RA_wire [4:0] $end
$var wire 1 ?$ id_rf_xpr_src2_RE_wire $end
$var wire 5 @$ id_rf_xpr_src2_RA_wire [4:0] $end
$var wire 1 A$ wb_rf_xpr_wrt0_WE_wire $end
$var wire 5 B$ wb_rf_xpr_wrt0_WA_wire [4:0] $end
$var wire 32 C$ wb_rf_xpr_wrt0_D_wire [31:0] $end
$var wire 32 D$ rf_xpr_src1_Q_wire [31:0] $end
$var wire 32 E$ rf_xpr_src2_Q_wire [31:0] $end
$var wire 1 F$ main_pipeline_control_ACT_wire $end
$var wire 1 G$ pipeline_control_pipe_EX_CLEAR_D_wire $end
$var wire 1 H$ pipeline_control_pipe_EX_STALL_D_wire $end
$var wire 1 I$ pipeline_control_pipe_ID_CLEAR_D_wire $end
$var wire 1 J$ pipeline_control_pipe_ID_STALL_D_wire $end
$var wire 1 K$ pipeline_control_pipe_ME_CLEAR_D_wire $end
$var wire 1 L$ pipeline_control_pipe_ME_STALL_D_wire $end
$var wire 1 M$ pipeline_control_pipe_WB_CLEAR_D_wire $end
$var wire 1 N$ pipeline_control_pipe_WB_STALL_D_wire $end
$var wire 1 O$ main_wb_ACT_wire $end
$var wire 1 P$ codasip_startup_ctrl_reset_ACT_wire $end
$var wire 1 Q$ ex_ex_memory_ACT_wire $end
$var wire 1 R$ ex_ex_output_ACT_wire $end
$var wire 1 S$ id_id_output_ACT_wire $end
$var wire 1 T$ fe_if_output_ACT_wire $end
$var wire 1 U$ me_me_memory_ACT_wire $end
$var wire 1 V$ me_me_output_ACT_wire $end
$var wire 1 W$ main_ex_ACT_wire $end
$var wire 1 X$ main_fe_ACT_wire $end
$var wire 1 Y$ main_id_ACT_wire $end
$var wire 1 Z$ id_dec_ACT_wire $end
$var wire 17 [$ id_dec_codasip_param_0_wire [16:0] $end
$var wire 1 \$ main_me_ACT_wire $end
$var wire 1 ]$ codasip_startup_ctrl_main_ACT_wire $end
$scope module r_id_pc $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z" CLEAR $end
$var wire 1 {" STALL $end
$var wire 1 |" WE $end
$var wire 32 !# D [31:0] $end
$var wire 32 $# Q [31:0] $end
$var reg 32 ^$ Q_reg [31:0] $end
$upscope $end
$scope module r_id_instr_preserved $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 %# WE $end
$var wire 32 &# D [31:0] $end
$var wire 32 '# Q [31:0] $end
$var reg 32 _$ Q_reg [31:0] $end
$upscope $end
$scope module r_id_pc_preserved $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 (# WE $end
$var wire 32 )# D [31:0] $end
$var wire 32 *# Q [31:0] $end
$var reg 32 `$ Q_reg [31:0] $end
$upscope $end
$scope module r_ex_pc $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 -# WE $end
$var wire 32 .# D [31:0] $end
$var wire 32 /# Q [31:0] $end
$var reg 32 a$ Q_reg [31:0] $end
$upscope $end
$scope module r_ex_aluop $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 0# WE $end
$var wire 4 1# D [3:0] $end
$var wire 4 2# Q [3:0] $end
$var reg 4 b$ Q_reg [3:0] $end
$upscope $end
$scope module r_ex_alusrc1 $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 3# WE $end
$var wire 2 4# D [1:0] $end
$var wire 2 5# Q [1:0] $end
$var reg 2 c$ Q_reg [1:0] $end
$upscope $end
$scope module r_ex_alusrc2 $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 6# WE $end
$var wire 1 7# D [0:0] $end
$var wire 1 8# Q [0:0] $end
$var reg 1 d$ Q_reg [0:0] $end
$upscope $end
$scope module r_ex_regwrite $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 9# WE $end
$var wire 1 :# D [0:0] $end
$var wire 1 ;# Q [0:0] $end
$var reg 1 e$ Q_reg [0:0] $end
$upscope $end
$scope module r_ex_rfwtsel $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 <# WE $end
$var wire 2 =# D [1:0] $end
$var wire 2 ># Q [1:0] $end
$var reg 2 f$ Q_reg [1:0] $end
$upscope $end
$scope module r_ex_brnchop $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 ?# WE $end
$var wire 3 @# D [2:0] $end
$var wire 3 A# Q [2:0] $end
$var reg 3 g$ Q_reg [2:0] $end
$upscope $end
$scope module r_ex_brnchsel $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 B# WE $end
$var wire 1 C# D [0:0] $end
$var wire 1 D# Q [0:0] $end
$var reg 1 h$ Q_reg [0:0] $end
$upscope $end
$scope module r_ex_memop $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 E# WE $end
$var wire 4 F# D [3:0] $end
$var wire 4 G# Q [3:0] $end
$var reg 4 i$ Q_reg [3:0] $end
$upscope $end
$scope module r_ex_rd $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 H# WE $end
$var wire 5 I# D [4:0] $end
$var wire 5 J# Q [4:0] $end
$var reg 5 j$ Q_reg [4:0] $end
$upscope $end
$scope module r_ex_rs1 $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 K# WE $end
$var wire 5 L# D [4:0] $end
$var wire 5 M# Q [4:0] $end
$var reg 5 k$ Q_reg [4:0] $end
$upscope $end
$scope module r_ex_rs2 $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 N# WE $end
$var wire 5 O# D [4:0] $end
$var wire 5 P# Q [4:0] $end
$var reg 5 l$ Q_reg [4:0] $end
$upscope $end
$scope module r_ex_immed $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 Q# WE $end
$var wire 32 R# D [31:0] $end
$var wire 32 S# Q [31:0] $end
$var reg 32 m$ Q_reg [31:0] $end
$upscope $end
$scope module r_ex_reg1 $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 T# WE $end
$var wire 32 U# D [31:0] $end
$var wire 32 V# Q [31:0] $end
$var reg 32 n$ Q_reg [31:0] $end
$upscope $end
$scope module r_ex_reg2 $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 +# CLEAR $end
$var wire 1 ,# STALL $end
$var wire 1 W# WE $end
$var wire 32 X# D [31:0] $end
$var wire 32 Y# Q [31:0] $end
$var reg 32 o$ Q_reg [31:0] $end
$upscope $end
$scope module r_me_pc $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 \# WE $end
$var wire 32 ]# D [31:0] $end
$var wire 32 ^# Q [31:0] $end
$var reg 32 p$ Q_reg [31:0] $end
$upscope $end
$scope module r_me_regwrite $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 _# WE $end
$var wire 1 `# D [0:0] $end
$var wire 1 a# Q [0:0] $end
$var reg 1 q$ Q_reg [0:0] $end
$upscope $end
$scope module r_me_rfwtsel $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 b# WE $end
$var wire 2 c# D [1:0] $end
$var wire 2 d# Q [1:0] $end
$var reg 2 r$ Q_reg [1:0] $end
$upscope $end
$scope module r_me_rd $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 e# WE $end
$var wire 5 f# D [4:0] $end
$var wire 5 g# Q [4:0] $end
$var reg 5 s$ Q_reg [4:0] $end
$upscope $end
$scope module r_me_memop $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 h# WE $end
$var wire 4 i# D [3:0] $end
$var wire 4 j# Q [3:0] $end
$var reg 4 t$ Q_reg [3:0] $end
$upscope $end
$scope module r_me_alu $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 k# WE $end
$var wire 32 l# D [31:0] $end
$var wire 32 m# Q [31:0] $end
$var reg 32 u$ Q_reg [31:0] $end
$upscope $end
$scope module r_me_zero $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 n# WE $end
$var wire 1 o# D [0:0] $end
$var wire 1 p# Q [0:0] $end
$var reg 1 v$ Q_reg [0:0] $end
$upscope $end
$scope module r_me_wtdat $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 q# WE $end
$var wire 32 r# D [31:0] $end
$var wire 32 s# Q [31:0] $end
$var reg 32 w$ Q_reg [31:0] $end
$upscope $end
$scope module r_me_brnchop $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 t# WE $end
$var wire 3 u# D [2:0] $end
$var wire 3 v# Q [2:0] $end
$var reg 3 x$ Q_reg [2:0] $end
$upscope $end
$scope module r_me_bradd $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 Z# CLEAR $end
$var wire 1 [# STALL $end
$var wire 1 w# WE $end
$var wire 32 x# D [31:0] $end
$var wire 32 y# Q [31:0] $end
$var reg 32 y$ Q_reg [31:0] $end
$upscope $end
$scope module r_wb_pc $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z# CLEAR $end
$var wire 1 {# STALL $end
$var wire 1 |# WE $end
$var wire 32 }# D [31:0] $end
$var wire 32 ~# Q [31:0] $end
$var reg 32 z$ Q_reg [31:0] $end
$upscope $end
$scope module r_wb_regwrite $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z# CLEAR $end
$var wire 1 {# STALL $end
$var wire 1 !$ WE $end
$var wire 1 "$ D [0:0] $end
$var wire 1 #$ Q [0:0] $end
$var reg 1 {$ Q_reg [0:0] $end
$upscope $end
$scope module r_wb_rfwtsel $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z# CLEAR $end
$var wire 1 {# STALL $end
$var wire 1 $$ WE $end
$var wire 2 %$ D [1:0] $end
$var wire 2 &$ Q [1:0] $end
$var reg 2 |$ Q_reg [1:0] $end
$upscope $end
$scope module r_wb_rd $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z# CLEAR $end
$var wire 1 {# STALL $end
$var wire 1 '$ WE $end
$var wire 5 ($ D [4:0] $end
$var wire 5 )$ Q [4:0] $end
$var reg 5 }$ Q_reg [4:0] $end
$upscope $end
$scope module r_wb_memdat $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z# CLEAR $end
$var wire 1 {# STALL $end
$var wire 1 *$ WE $end
$var wire 32 +$ D [31:0] $end
$var wire 32 ,$ Q [31:0] $end
$var reg 32 ~$ Q_reg [31:0] $end
$upscope $end
$scope module r_wb_alu $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 z# CLEAR $end
$var wire 1 {# STALL $end
$var wire 1 -$ WE $end
$var wire 32 .$ D [31:0] $end
$var wire 32 /$ Q [31:0] $end
$var reg 32 !% Q_reg [31:0] $end
$upscope $end
$scope module r_id_clear $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 0$ WE $end
$var wire 1 1$ D [0:0] $end
$var wire 1 2$ Q [0:0] $end
$var reg 1 "% Q_reg [0:0] $end
$upscope $end
$scope module r_id_stall $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 3$ WE $end
$var wire 1 4$ D [0:0] $end
$var wire 1 5$ Q [0:0] $end
$var reg 1 #% Q_reg [0:0] $end
$upscope $end
$scope module r_pc $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 6$ WE $end
$var wire 32 9$ D [31:0] $end
$var wire 32 <$ Q [31:0] $end
$var reg 32 $% Q_reg [31:0] $end
$upscope $end
$scope module rf_xpr $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 =$ src1_RE $end
$var wire 5 >$ src1_RA [4:0] $end
$var wire 1 ?$ src2_RE $end
$var wire 5 @$ src2_RA [4:0] $end
$var wire 1 A$ wrt0_WE $end
$var wire 5 B$ wrt0_WA [4:0] $end
$var wire 32 C$ wrt0_D [31:0] $end
$var wire 32 D$ src1_Q [31:0] $end
$var wire 32 E$ src2_Q [31:0] $end
$upscope $end
$scope module pipeline_control $end
$var wire 1 F$ ACT $end
$var wire 1 u" s_ex_clear_Q $end
$var wire 1 t" s_ex_stall_Q $end
$var wire 1 s" s_id_clear_Q $end
$var wire 1 r" s_id_stall_Q $end
$var wire 1 w" s_me_clear_Q $end
$var wire 1 v" s_me_stall_Q $end
$var wire 1 y" s_wb_clear_Q $end
$var wire 1 x" s_wb_stall_Q $end
$var wire 1 G$ pipe_EX_CLEAR_D $end
$var wire 1 H$ pipe_EX_STALL_D $end
$var wire 1 I$ pipe_ID_CLEAR_D $end
$var wire 1 J$ pipe_ID_STALL_D $end
$var wire 1 K$ pipe_ME_CLEAR_D $end
$var wire 1 L$ pipe_ME_STALL_D $end
$var wire 1 M$ pipe_WB_CLEAR_D $end
$var wire 1 N$ pipe_WB_STALL_D $end
$var wire 1 %% codasip_tmp_var_1 $end
$var wire 1 &% codasip_tmp_var_2 $end
$var wire 1 '% codasip_tmp_var_3 $end
$var wire 1 (% codasip_tmp_var_4 $end
$var wire 1 )% codasip_tmp_var_5 $end
$var wire 1 *% codasip_tmp_var_6 $end
$var wire 1 +% codasip_tmp_var_7 $end
$var wire 1 ,% codasip_tmp_var_8 $end
$upscope $end
$scope module wb $end
$var wire 1 O$ ACT $end
$var wire 32 /$ r_wb_alu_Q [31:0] $end
$var wire 32 ,$ r_wb_memdat_Q [31:0] $end
$var wire 32 ~# r_wb_pc_Q [31:0] $end
$var wire 5 )$ r_wb_rd_Q [4:0] $end
$var wire 1 #$ r_wb_regwrite_Q $end
$var wire 2 &$ r_wb_rfwtsel_Q [1:0] $end
$var wire 32 p" s_wb_pc4_Q [31:0] $end
$var wire 32 q" s_wb_result_Q [31:0] $end
$var wire 32 C$ rf_xpr_wrt0_D [31:0] $end
$var wire 5 B$ rf_xpr_wrt0_WA [4:0] $end
$var wire 1 A$ rf_xpr_wrt0_WE $end
$var wire 32 p" s_wb_pc4_D [31:0] $end
$var wire 32 q" s_wb_result_D [31:0] $end
$var wire 1 x" s_wb_stall_D $end
$var wire 2 -% codasip_tmp_var_0 [1:0] $end
$var wire 1 .% codasip_tmp_var_1 $end
$var wire 32 /% s_wb_result_D_ACT_wire [31:0] $end
$var reg 32 0% tmp_codasip_conv_mux_s_wb_result_D_ACT_wire_1 [31:0] $end
$upscope $end
$scope module reset $end
$var wire 1 P$ ACT $end
$var wire 32 :$ r_pc_D [31:0] $end
$var wire 1 7$ r_pc_WE $end
$upscope $end
$scope module ex_memory $end
$var wire 1 Q$ ACT $end
$var wire 4 G# r_ex_memop_Q [3:0] $end
$var wire 32 a" s_ex_alu_Q [31:0] $end
$var wire 32 d" s_ex_fwd2_Q [31:0] $end
$var wire 2 i" s_ex_memsize_Q [1:0] $end
$var wire 32 7" ldst_HADDR [31:0] $end
$var wire 3 8" ldst_HBURST [2:0] $end
$var wire 1 9" ldst_HMASTLOCK $end
$var wire 4 :" ldst_HPROT [3:0] $end
$var wire 3 ;" ldst_HSIZE [2:0] $end
$var wire 2 <" ldst_HTRANS [1:0] $end
$var wire 1 =" ldst_HWRITE $end
$var wire 32 j" s_ex_encoded_data_D [31:0] $end
$var wire 2 i" s_ex_memsize_D [1:0] $end
$var wire 32 1% codasip_tmp_var_0 [31:0] $end
$var wire 4 2% codasip_tmp_var_1 [3:0] $end
$var wire 2 3% codasip_tmp_var_2 [1:0] $end
$var wire 1 4% op_rw_B0 $end
$var wire 2 5% op_type_B0 [1:0] $end
$var wire 2 6% s_ex_memsize_D_ACT_wire [1:0] $end
$var reg 2 7% tmp_codasip_conv_mux_s_ex_memsize_D_ACT_wire_1 [1:0] $end
$var reg 1 8% tmp_codasip_conv_mux_op_rw_B0_D_2 $end
$var reg 2 9% tmp_codasip_conv_mux_op_type_B0_D_3 [1:0] $end
$var reg 32 :% tmp_codasip_conv_mux_codasip_tmp_var_0_D_4 [31:0] $end
$upscope $end
$scope module ex_output $end
$var wire 1 R$ ACT $end
$var wire 3 A# r_ex_brnchop_Q [2:0] $end
$var wire 4 G# r_ex_memop_Q [3:0] $end
$var wire 32 /# r_ex_pc_Q [31:0] $end
$var wire 5 J# r_ex_rd_Q [4:0] $end
$var wire 1 ;# r_ex_regwrite_Q $end
$var wire 2 ># r_ex_rfwtsel_Q [1:0] $end
$var wire 32 a" s_ex_alu_Q [31:0] $end
$var wire 32 g" s_ex_bradd_Q [31:0] $end
$var wire 32 j" s_ex_encoded_data_Q [31:0] $end
$var wire 1 b" s_ex_zero_Q $end
$var wire 32 l# r_me_alu_D [31:0] $end
$var wire 1 k# r_me_alu_WE $end
$var wire 32 x# r_me_bradd_D [31:0] $end
$var wire 1 w# r_me_bradd_WE $end
$var wire 3 u# r_me_brnchop_D [2:0] $end
$var wire 1 t# r_me_brnchop_WE $end
$var wire 4 i# r_me_memop_D [3:0] $end
$var wire 1 h# r_me_memop_WE $end
$var wire 32 ]# r_me_pc_D [31:0] $end
$var wire 1 \# r_me_pc_WE $end
$var wire 5 f# r_me_rd_D [4:0] $end
$var wire 1 e# r_me_rd_WE $end
$var wire 1 `# r_me_regwrite_D $end
$var wire 1 _# r_me_regwrite_WE $end
$var wire 2 c# r_me_rfwtsel_D [1:0] $end
$var wire 1 b# r_me_rfwtsel_WE $end
$var wire 32 r# r_me_wtdat_D [31:0] $end
$var wire 1 q# r_me_wtdat_WE $end
$var wire 1 o# r_me_zero_D $end
$var wire 1 n# r_me_zero_WE $end
$upscope $end
$scope module id_output $end
$var wire 1 S$ ACT $end
$var wire 32 $# r_id_pc_Q [31:0] $end
$var wire 4 F" s_id_aluop_Q [3:0] $end
$var wire 2 G" s_id_alusrc1_Q [1:0] $end
$var wire 1 H" s_id_alusrc2_Q $end
$var wire 3 K" s_id_brnchop_Q [2:0] $end
$var wire 1 L" s_id_brnchsel_Q $end
$var wire 32 R" s_id_immed_Q [31:0] $end
$var wire 32 D" s_id_instr_Q [31:0] $end
$var wire 4 M" s_id_memop_Q [3:0] $end
$var wire 5 Q" s_id_rd_Q [4:0] $end
$var wire 32 X" s_id_reg1_Q [31:0] $end
$var wire 32 Y" s_id_reg2_Q [31:0] $end
$var wire 1 I" s_id_regwrite_Q $end
$var wire 2 J" s_id_rfwtsel_Q [1:0] $end
$var wire 5 O" s_id_rs1_Q [4:0] $end
$var wire 5 P" s_id_rs2_Q [4:0] $end
$var wire 4 1# r_ex_aluop_D [3:0] $end
$var wire 1 0# r_ex_aluop_WE $end
$var wire 2 4# r_ex_alusrc1_D [1:0] $end
$var wire 1 3# r_ex_alusrc1_WE $end
$var wire 1 7# r_ex_alusrc2_D $end
$var wire 1 6# r_ex_alusrc2_WE $end
$var wire 3 @# r_ex_brnchop_D [2:0] $end
$var wire 1 ?# r_ex_brnchop_WE $end
$var wire 1 C# r_ex_brnchsel_D $end
$var wire 1 B# r_ex_brnchsel_WE $end
$var wire 32 R# r_ex_immed_D [31:0] $end
$var wire 1 Q# r_ex_immed_WE $end
$var wire 4 F# r_ex_memop_D [3:0] $end
$var wire 1 E# r_ex_memop_WE $end
$var wire 32 .# r_ex_pc_D [31:0] $end
$var wire 1 -# r_ex_pc_WE $end
$var wire 5 I# r_ex_rd_D [4:0] $end
$var wire 1 H# r_ex_rd_WE $end
$var wire 32 U# r_ex_reg1_D [31:0] $end
$var wire 1 T# r_ex_reg1_WE $end
$var wire 32 X# r_ex_reg2_D [31:0] $end
$var wire 1 W# r_ex_reg2_WE $end
$var wire 1 :# r_ex_regwrite_D $end
$var wire 1 9# r_ex_regwrite_WE $end
$var wire 2 =# r_ex_rfwtsel_D [1:0] $end
$var wire 1 <# r_ex_rfwtsel_WE $end
$var wire 5 L# r_ex_rs1_D [4:0] $end
$var wire 1 K# r_ex_rs1_WE $end
$var wire 5 O# r_ex_rs2_D [4:0] $end
$var wire 1 N# r_ex_rs2_WE $end
$var wire 32 &# r_id_instr_preserved_D [31:0] $end
$var wire 1 %# r_id_instr_preserved_WE $end
$var wire 32 )# r_id_pc_preserved_D [31:0] $end
$var wire 1 (# r_id_pc_preserved_WE $end
$upscope $end
$scope module if_output $end
$var wire 1 T$ ACT $end
$var wire 1 r" s_id_stall_Q $end
$var wire 32 B" s_if_nextpc_Q [31:0] $end
$var wire 32 C" s_if_pcin_Q [31:0] $end
$var wire 1 1$ r_id_clear_D $end
$var wire 1 0$ r_id_clear_WE $end
$var wire 32 "# r_id_pc_D [31:0] $end
$var wire 1 }" r_id_pc_WE $end
$var wire 1 4$ r_id_stall_D $end
$var wire 1 3$ r_id_stall_WE $end
$var wire 32 ;$ r_pc_D [31:0] $end
$var wire 1 8$ r_pc_WE $end
$upscope $end
$scope module me_memory $end
$var wire 1 U$ ACT $end
$var wire 32 A" ldst_HRDATA [31:0] $end
$var wire 1 ?" ldst_HREADY $end
$var wire 1 @" ldst_HRESP $end
$var wire 2 ;% r_me_alu_Q [1:0] $end
$var wire 4 j# r_me_memop_Q [3:0] $end
$var wire 32 s# r_me_wtdat_Q [31:0] $end
$var wire 32 m" s_me_decoded_data_Q [31:0] $end
$var wire 1 x" s_wb_stall_Q $end
$var wire 32 >" ldst_HWDATA [31:0] $end
$var wire 32 m" s_me_decoded_data_D [31:0] $end
$var wire 32 n" s_me_mem_result_D [31:0] $end
$var wire 1 v" s_me_stall_D $end
$var wire 32 <% codasip_tmp_var_0 [31:0] $end
$var wire 1 =% codasip_tmp_var_1 $end
$var wire 2 >% codasip_tmp_var_2 [1:0] $end
$var wire 4 ?% codasip_tmp_var_3 [3:0] $end
$var wire 1 @% codasip_tmp_var_4 $end
$var wire 1 A% data_ready_B0 $end
$var wire 1 B% data_response_B0 $end
$var wire 32 C% load_data_temp_B0 [31:0] $end
$var wire 32 D% s_me_decoded_data_D_ACT_wire [31:0] $end
$var wire 32 E% s_me_mem_result_D_ACT_wire [31:0] $end
$var wire 1 F% s_me_stall_D_ACT_wire $end
$var wire 32 G% tmp_codasip_conv_STATIC_CAST_120_1 [31:0] $end
$var wire 32 H% tmp_codasip_conv_STATIC_CAST_147_2 [31:0] $end
$upscope $end
$scope module me_output $end
$var wire 1 V$ ACT $end
$var wire 32 m# r_me_alu_Q [31:0] $end
$var wire 32 ^# r_me_pc_Q [31:0] $end
$var wire 5 g# r_me_rd_Q [4:0] $end
$var wire 1 a# r_me_regwrite_Q $end
$var wire 2 d# r_me_rfwtsel_Q [1:0] $end
$var wire 32 n" s_me_mem_result_Q [31:0] $end
$var wire 32 .$ r_wb_alu_D [31:0] $end
$var wire 1 -$ r_wb_alu_WE $end
$var wire 32 +$ r_wb_memdat_D [31:0] $end
$var wire 1 *$ r_wb_memdat_WE $end
$var wire 32 }# r_wb_pc_D [31:0] $end
$var wire 1 |# r_wb_pc_WE $end
$var wire 5 ($ r_wb_rd_D [4:0] $end
$var wire 1 '$ r_wb_rd_WE $end
$var wire 1 "$ r_wb_regwrite_D $end
$var wire 1 !$ r_wb_regwrite_WE $end
$var wire 2 %$ r_wb_rfwtsel_D [1:0] $end
$var wire 1 $$ r_wb_rfwtsel_WE $end
$upscope $end
$scope module ex $end
$var wire 1 W$ ACT $end
$var wire 4 2# r_ex_aluop_Q [3:0] $end
$var wire 2 5# r_ex_alusrc1_Q [1:0] $end
$var wire 1 8# r_ex_alusrc2_Q $end
$var wire 3 A# r_ex_brnchop_Q [2:0] $end
$var wire 1 D# r_ex_brnchsel_Q $end
$var wire 32 S# r_ex_immed_Q [31:0] $end
$var wire 32 /# r_ex_pc_Q [31:0] $end
$var wire 32 V# r_ex_reg1_Q [31:0] $end
$var wire 32 Y# r_ex_reg2_Q [31:0] $end
$var wire 5 M# r_ex_rs1_Q [4:0] $end
$var wire 5 P# r_ex_rs2_Q [4:0] $end
$var wire 32 m# r_me_alu_Q [31:0] $end
$var wire 5 g# r_me_rd_Q [4:0] $end
$var wire 1 a# r_me_regwrite_Q $end
$var wire 5 )$ r_wb_rd_Q [4:0] $end
$var wire 1 #$ r_wb_regwrite_Q $end
$var wire 32 a" s_ex_alu_Q [31:0] $end
$var wire 32 h" s_ex_brimm_Q [31:0] $end
$var wire 1 k" s_ex_fast_zero_Q $end
$var wire 32 c" s_ex_fwd1_Q [31:0] $end
$var wire 32 d" s_ex_fwd2_Q [31:0] $end
$var wire 2 e" s_ex_fwdA_Q [1:0] $end
$var wire 2 f" s_ex_fwdB_Q [1:0] $end
$var wire 32 _" s_ex_src1_Q [31:0] $end
$var wire 32 `" s_ex_src2_Q [31:0] $end
$var wire 1 v" s_me_stall_Q $end
$var wire 32 q" s_wb_result_Q [31:0] $end
$var wire 1 Q$ ex_memory_ACT $end
$var wire 1 R$ ex_output_ACT $end
$var wire 32 a" s_ex_alu_D [31:0] $end
$var wire 32 g" s_ex_bradd_D [31:0] $end
$var wire 32 h" s_ex_brimm_D [31:0] $end
$var wire 1 k" s_ex_fast_zero_D $end
$var wire 32 c" s_ex_fwd1_D [31:0] $end
$var wire 32 d" s_ex_fwd2_D [31:0] $end
$var wire 2 e" s_ex_fwdA_D [1:0] $end
$var wire 2 f" s_ex_fwdB_D [1:0] $end
$var wire 32 _" s_ex_src1_D [31:0] $end
$var wire 32 `" s_ex_src2_D [31:0] $end
$var wire 1 t" s_ex_stall_D $end
$var wire 1 l" s_ex_take_branch_D $end
$var wire 1 b" s_ex_zero_D $end
$var wire 1 I% codasip_tmp_var_0 $end
$var wire 1 J% codasip_tmp_var_1 $end
$var wire 1 K% codasip_tmp_var_10 $end
$var wire 1 L% codasip_tmp_var_11 $end
$var wire 1 M% codasip_tmp_var_13 $end
$var wire 1 N% codasip_tmp_var_2 $end
$var wire 1 O% codasip_tmp_var_3 $end
$var wire 2 P% codasip_tmp_var_4 [1:0] $end
$var wire 2 Q% codasip_tmp_var_5 [1:0] $end
$var wire 2 R% codasip_tmp_var_6 [1:0] $end
$var wire 1 S% codasip_tmp_var_7 $end
$var wire 3 T% codasip_tmp_var_8 [2:0] $end
$var wire 4 U% codasip_tmp_var_9 [3:0] $end
$var wire 32 V% s_ex_alu_D_ACT_wire [31:0] $end
$var wire 32 W% s_ex_bradd_D_ACT_wire [31:0] $end
$var wire 32 X% s_ex_fwd1_D_ACT_wire [31:0] $end
$var wire 32 Y% s_ex_fwd2_D_ACT_wire [31:0] $end
$var wire 2 Z% s_ex_fwdA_D_ACT_wire [1:0] $end
$var wire 2 [% s_ex_fwdB_D_ACT_wire [1:0] $end
$var wire 32 \% s_ex_src1_D_ACT_wire [31:0] $end
$var wire 32 ]% s_ex_src2_D_ACT_wire [31:0] $end
$var wire 1 ^% s_ex_take_branch_D_ACT_wire $end
$var reg 32 _% tmp_codasip_conv_mux_s_ex_fwd1_D_ACT_wire_1 [31:0] $end
$var reg 32 `% tmp_codasip_conv_mux_s_ex_fwd2_D_ACT_wire_2 [31:0] $end
$var reg 32 a% tmp_codasip_conv_mux_s_ex_src1_D_ACT_wire_3 [31:0] $end
$var reg 32 b% tmp_codasip_conv_mux_s_ex_src2_D_ACT_wire_4 [31:0] $end
$var reg 1 c% tmp_codasip_conv_mux_s_ex_take_branch_D_ACT_wire_5 $end
$var reg 32 d% tmp_codasip_conv_mux_s_ex_bradd_D_ACT_wire_6 [31:0] $end
$upscope $end
$scope module fe $end
$var wire 1 X$ ACT $end
$var wire 32 y# r_me_bradd_Q [31:0] $end
$var wire 32 <$ r_pc_Q [31:0] $end
$var wire 32 g" s_ex_bradd_Q [31:0] $end
$var wire 1 l" s_ex_take_branch_Q $end
$var wire 1 r" s_id_stall_Q $end
$var wire 32 C" s_if_pcin_Q [31:0] $end
$var wire 1 o" s_me_pcsrc_Q $end
$var wire 32 -" if_code_HADDR [31:0] $end
$var wire 3 ." if_code_HBURST [2:0] $end
$var wire 1 /" if_code_HMASTLOCK $end
$var wire 4 0" if_code_HPROT [3:0] $end
$var wire 3 1" if_code_HSIZE [2:0] $end
$var wire 2 2" if_code_HTRANS [1:0] $end
$var wire 1 3" if_code_HWRITE $end
$var wire 1 T$ if_output_ACT $end
$var wire 1 u" s_ex_clear_D $end
$var wire 1 s" s_id_clear_D $end
$var wire 32 B" s_if_nextpc_D [31:0] $end
$var wire 32 C" s_if_pcin_D [31:0] $end
$var wire 1 w" s_me_clear_D $end
$var wire 1 y" s_wb_clear_D $end
$var wire 32 e% STATEMENT_BIT_CONCATENATE_63_STATEMENT_AST_8_wire [31:0] $end
$var wire 4 f% cache_hprot_B0 [3:0] $end
$var wire 1 g% codasip_tmp_var_0 $end
$var wire 1 h% codasip_tmp_var_1 $end
$var wire 32 i% s_if_pcin_D_ACT_wire [31:0] $end
$upscope $end
$scope module id $end
$var wire 1 Y$ ACT $end
$var wire 32 6" if_code_HRDATA [31:0] $end
$var wire 1 4" if_code_HREADY $end
$var wire 1 5" if_code_HRESP $end
$var wire 4 G# r_ex_memop_Q [3:0] $end
$var wire 5 J# r_ex_rd_Q [4:0] $end
$var wire 1 2$ r_id_clear_Q $end
$var wire 32 '# r_id_instr_preserved_Q [31:0] $end
$var wire 32 *# r_id_pc_preserved_Q [31:0] $end
$var wire 1 5$ r_id_stall_Q $end
$var wire 5 )$ r_wb_rd_Q [4:0] $end
$var wire 1 #$ r_wb_regwrite_Q $end
$var wire 32 D$ rf_xpr_src1_Q [31:0] $end
$var wire 32 E$ rf_xpr_src2_Q [31:0] $end
$var wire 1 t" s_ex_stall_Q $end
$var wire 1 \" s_id_fwdA_Q $end
$var wire 1 ]" s_id_fwdB_Q $end
$var wire 32 T" s_id_immedb_Q [31:0] $end
$var wire 32 S" s_id_immedi_Q [31:0] $end
$var wire 32 W" s_id_immedj_Q [31:0] $end
$var wire 32 V" s_id_immeds_Q [31:0] $end
$var wire 32 U" s_id_immedu_Q [31:0] $end
$var wire 3 N" s_id_immsel_Q [2:0] $end
$var wire 32 D" s_id_instr_Q [31:0] $end
$var wire 1 ^" s_id_loadhaz_Q $end
$var wire 17 E" s_id_opc_Q [16:0] $end
$var wire 32 Z" s_id_rf1_Q [31:0] $end
$var wire 32 [" s_id_rf2_Q [31:0] $end
$var wire 5 O" s_id_rs1_Q [4:0] $end
$var wire 5 P" s_id_rs2_Q [4:0] $end
$var wire 32 q" s_wb_result_Q [31:0] $end
$var wire 1 Z$ dec_ACT $end
$var wire 17 [$ dec_codasip_param_0 [16:0] $end
$var wire 1 S$ id_output_ACT $end
$var wire 32 ## r_id_pc_D [31:0] $end
$var wire 1 ~" r_id_pc_WE $end
$var wire 5 >$ rf_xpr_src1_RA [4:0] $end
$var wire 1 =$ rf_xpr_src1_RE $end
$var wire 5 @$ rf_xpr_src2_RA [4:0] $end
$var wire 1 ?$ rf_xpr_src2_RE $end
$var wire 1 \" s_id_fwdA_D $end
$var wire 1 ]" s_id_fwdB_D $end
$var wire 32 R" s_id_immed_D [31:0] $end
$var wire 32 T" s_id_immedb_D [31:0] $end
$var wire 32 S" s_id_immedi_D [31:0] $end
$var wire 32 W" s_id_immedj_D [31:0] $end
$var wire 32 V" s_id_immeds_D [31:0] $end
$var wire 32 U" s_id_immedu_D [31:0] $end
$var wire 32 D" s_id_instr_D [31:0] $end
$var wire 1 ^" s_id_loadhaz_D $end
$var wire 17 E" s_id_opc_D [16:0] $end
$var wire 5 Q" s_id_rd_D [4:0] $end
$var wire 32 X" s_id_reg1_D [31:0] $end
$var wire 32 Y" s_id_reg2_D [31:0] $end
$var wire 32 Z" s_id_rf1_D [31:0] $end
$var wire 32 [" s_id_rf2_D [31:0] $end
$var wire 5 O" s_id_rs1_D [4:0] $end
$var wire 5 P" s_id_rs2_D [4:0] $end
$var wire 1 r" s_id_stall_D $end
$var wire 1 j% cache_ready_B0 $end
$var wire 1 k% cache_response_B0 $end
$var wire 1 l% codasip_tmp_var_0 $end
$var wire 1 m% codasip_tmp_var_1 $end
$var wire 1 n% codasip_tmp_var_2 $end
$var wire 1 o% codasip_tmp_var_3 $end
$var wire 1 p% codasip_tmp_var_4 $end
$var wire 1 q% codasip_tmp_var_5 $end
$var wire 3 r% codasip_tmp_var_6 [2:0] $end
$var wire 32 s% id_instr_temp_B0 [31:0] $end
$var wire 1 t% s_id_fwdA_D_ACT_wire $end
$var wire 1 u% s_id_fwdB_D_ACT_wire $end
$var wire 32 v% s_id_immed_D_ACT_wire [31:0] $end
$var wire 32 w% s_id_instr_D_ACT_wire [31:0] $end
$var wire 32 x% s_id_reg1_D_ACT_wire [31:0] $end
$var wire 32 y% s_id_reg2_D_ACT_wire [31:0] $end
$var reg 32 z% tmp_codasip_conv_mux_s_id_reg1_D_ACT_wire_1 [31:0] $end
$var reg 32 {% tmp_codasip_conv_mux_s_id_reg2_D_ACT_wire_2 [31:0] $end
$var reg 32 |% tmp_codasip_conv_mux_s_id_immed_D_ACT_wire_3 [31:0] $end
$var wire 32 }% tmp_codasip_conv_STATIC_CAST_171_4 [31:0] $end
$var wire 32 ~% tmp_codasip_conv_STATIC_CAST_157_5 [31:0] $end
$var wire 32 !& tmp_codasip_conv_STATIC_CAST_223_6 [31:0] $end
$var wire 32 "& tmp_codasip_conv_STATIC_CAST_206_7 [31:0] $end
$var wire 32 #& tmp_codasip_conv_STATIC_CAST_194_8 [31:0] $end
$upscope $end
$scope module me $end
$var wire 1 \$ ACT $end
$var wire 3 v# r_me_brnchop_Q [2:0] $end
$var wire 1 p# r_me_zero_Q $end
$var wire 1 U$ me_memory_ACT $end
$var wire 1 V$ me_output_ACT $end
$var wire 1 o" s_me_pcsrc_D $end
$var wire 3 $& codasip_tmp_var_0 [2:0] $end
$var wire 1 %& s_me_pcsrc_D_ACT_wire $end
$var reg 1 && tmp_codasip_conv_mux_s_me_pcsrc_D_ACT_wire_1 $end
$upscope $end
$scope module main $end
$var wire 1 ]$ ACT $end
$var wire 1 W$ ex_ACT $end
$var wire 1 X$ fe_ACT $end
$var wire 1 Y$ id_ACT $end
$var wire 1 \$ me_ACT $end
$var wire 1 F$ pipeline_control_ACT $end
$var wire 1 O$ wb_ACT $end
$upscope $end
$scope module dec $end
$var wire 1 Z$ ACT $end
$var wire 17 [$ codasip_param_0 [16:0] $end
$var wire 4 F" s_id_aluop_D [3:0] $end
$var wire 2 G" s_id_alusrc1_D [1:0] $end
$var wire 1 H" s_id_alusrc2_D $end
$var wire 3 K" s_id_brnchop_D [2:0] $end
$var wire 1 L" s_id_brnchsel_D $end
$var wire 3 N" s_id_immsel_D [2:0] $end
$var wire 4 M" s_id_memop_D [3:0] $end
$var wire 1 I" s_id_regwrite_D $end
$var wire 2 J" s_id_rfwtsel_D [1:0] $end
$var wire 17 '& codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc [16:0] $end
$var wire 10 (& codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc [9:0] $end
$var wire 7 )& codasip_return_MI13opc_utype_opsIH4_2id2id5_3dec3dec16_13opc_utype_ops3opc [6:0] $end
$var wire 17 *& codasip_return_MI17opc_itype_specialIH4_2id2id5_3dec3dec20_17opc_itype_special3opc [16:0] $end
$var wire 10 +& codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc [9:0] $end
$var wire 10 ,& codasip_return_MI15opc_itype_loadsIH4_2id2id5_3dec3dec18_15opc_itype_loads3opc [9:0] $end
$var wire 10 -& codasip_return_MI15opc_stype_storeIH4_2id2id5_3dec3dec18_15opc_stype_store3opc [9:0] $end
$var wire 1 .& cs_0_wire $end
$var wire 1 /& cs_10_wire $end
$var wire 1 0& cs_11_wire $end
$var wire 1 1& cs_12_wire $end
$var wire 1 2& cs_13_wire $end
$var wire 1 3& cs_14_wire $end
$var wire 1 4& cs_15_wire $end
$var wire 1 5& cs_16_wire $end
$var wire 1 6& cs_17_wire $end
$var wire 1 7& cs_18_wire $end
$var wire 1 8& cs_19_wire $end
$var wire 1 9& cs_1_wire $end
$var wire 1 :& cs_20_wire $end
$var wire 1 ;& cs_21_wire $end
$var wire 1 <& cs_22_wire $end
$var wire 1 =& cs_23_wire $end
$var wire 1 >& cs_24_wire $end
$var wire 1 ?& cs_25_wire $end
$var wire 1 @& cs_26_wire $end
$var wire 1 A& cs_27_wire $end
$var wire 1 B& cs_28_wire $end
$var wire 1 C& cs_29_wire $end
$var wire 1 D& cs_2_wire $end
$var wire 1 E& cs_30_wire $end
$var wire 1 F& cs_31_wire $end
$var wire 1 G& cs_32_wire $end
$var wire 1 H& cs_33_wire $end
$var wire 1 I& cs_34_wire $end
$var wire 1 J& cs_35_wire $end
$var wire 1 K& cs_36_wire $end
$var wire 1 L& cs_37_wire $end
$var wire 1 M& cs_38_wire $end
$var wire 1 N& cs_39_wire $end
$var wire 1 O& cs_3_wire $end
$var wire 1 P& cs_40_wire $end
$var wire 1 Q& cs_41_wire $end
$var wire 1 R& cs_42_wire $end
$var wire 1 S& cs_43_wire $end
$var wire 1 T& cs_44_wire $end
$var wire 1 U& cs_45_wire $end
$var wire 1 V& cs_46_wire $end
$var wire 1 W& cs_47_wire $end
$var wire 1 X& cs_4_wire $end
$var wire 1 Y& cs_5_wire $end
$var wire 1 Z& cs_6_wire $end
$var wire 1 [& cs_7_wire $end
$var wire 1 \& cs_8_wire $end
$var wire 1 ]& cs_9_wire $end
$var wire 1 ^& invalid_instruction_wire $end
$var wire 1 _& vs_0_wire $end
$var wire 1 `& vs_1_wire $end
$var wire 1 a& vs_2_wire $end
$var wire 10 b& codasip_tmp_var_0_i_hw_alu_i_dec_dec_id_id [9:0] $end
$var wire 17 c& codasip_tmp_var_0_i_hw_shift_dec_dec_id_id [16:0] $end
$var wire 10 d& codasip_tmp_var_0_i_hw_store_dec_dec_id_id [9:0] $end
$var wire 10 e& codasip_tmp_var_0_i_hw_branch_dec_dec_id_id [9:0] $end
$var wire 7 f& codasip_tmp_var_0_i_hw_upper_imm_dec_dec_id_id [6:0] $end
$var wire 17 g& codasip_tmp_var_0_i_hw_alu_dec_dec_id_id [16:0] $end
$var wire 10 h& codasip_tmp_var_0_i_hw_load_dec_dec_id_id [9:0] $end
$var wire 1 i& i_hw_alu_i_ACT $end
$var wire 1 j& i_hw_shift_ACT $end
$var wire 1 k& i_hw_store_ACT $end
$var wire 1 l& i_hw_branch_ACT $end
$var wire 1 m& i_hw_upper_imm_ACT $end
$var wire 1 n& opc_lb_ACT $end
$var wire 1 o& opc_lh_ACT $end
$var wire 1 p& opc_lw_ACT $end
$var wire 1 q& opc_or_ACT $end
$var wire 1 r& opc_sb_ACT $end
$var wire 1 s& opc_sh_ACT $end
$var wire 1 t& opc_sw_ACT $end
$var wire 1 u& opc_add_ACT $end
$var wire 1 v& opc_and_ACT $end
$var wire 1 w& opc_beq_ACT $end
$var wire 1 x& opc_bge_ACT $end
$var wire 1 y& opc_blt_ACT $end
$var wire 1 z& opc_bne_ACT $end
$var wire 1 {& opc_lbu_ACT $end
$var wire 1 |& opc_lhu_ACT $end
$var wire 1 }& opc_lui_ACT $end
$var wire 1 ~& opc_ori_ACT $end
$var wire 1 !' opc_sll_ACT $end
$var wire 1 "' opc_slt_ACT $end
$var wire 1 #' opc_sra_ACT $end
$var wire 1 $' opc_srl_ACT $end
$var wire 1 %' opc_sub_ACT $end
$var wire 1 &' opc_xor_ACT $end
$var wire 1 '' i_hw_alu_ACT $end
$var wire 1 (' i_hw_jal_ACT $end
$var wire 1 )' opc_addi_ACT $end
$var wire 1 *' opc_andi_ACT $end
$var wire 1 +' opc_bgeu_ACT $end
$var wire 1 ,' opc_bltu_ACT $end
$var wire 1 -' opc_slli_ACT $end
$var wire 1 .' opc_slti_ACT $end
$var wire 1 /' opc_sltu_ACT $end
$var wire 1 0' opc_srai_ACT $end
$var wire 1 1' opc_srli_ACT $end
$var wire 1 2' opc_xori_ACT $end
$var wire 1 3' i_hw_halt_ACT $end
$var wire 1 4' i_hw_jalr_ACT $end
$var wire 1 5' i_hw_load_ACT $end
$var wire 1 6' opc_auipc_ACT $end
$var wire 1 7' opc_sltiu_ACT $end
$var wire 1 8' i_hw_alu_i_s_id_regwrite_D $end
$var wire 2 9' i_hw_alu_i_s_id_rfwtsel_D [1:0] $end
$var wire 4 :' i_hw_alu_i_s_id_aluop_D [3:0] $end
$var wire 4 ;' i_hw_alu_i_s_id_aluop_D_ACT [3:0] $end
$var wire 2 <' i_hw_alu_i_s_id_alusrc1_D [1:0] $end
$var wire 1 =' i_hw_alu_i_s_id_alusrc2_D $end
$var wire 3 >' i_hw_alu_i_s_id_immsel_D [2:0] $end
$var wire 3 ?' i_hw_alu_i_s_id_brnchop_D [2:0] $end
$var wire 1 @' i_hw_alu_i_s_id_brnchsel_D $end
$var wire 4 A' i_hw_alu_i_s_id_memop_D [3:0] $end
$var wire 1 B' i_hw_shift_s_id_regwrite_D $end
$var wire 2 C' i_hw_shift_s_id_rfwtsel_D [1:0] $end
$var wire 4 D' i_hw_shift_s_id_aluop_D [3:0] $end
$var wire 4 E' i_hw_shift_s_id_aluop_D_ACT [3:0] $end
$var wire 2 F' i_hw_shift_s_id_alusrc1_D [1:0] $end
$var wire 1 G' i_hw_shift_s_id_alusrc2_D $end
$var wire 3 H' i_hw_shift_s_id_immsel_D [2:0] $end
$var wire 3 I' i_hw_shift_s_id_brnchop_D [2:0] $end
$var wire 1 J' i_hw_shift_s_id_brnchsel_D $end
$var wire 4 K' i_hw_shift_s_id_memop_D [3:0] $end
$var wire 1 L' i_hw_store_s_id_regwrite_D $end
$var wire 2 M' i_hw_store_s_id_rfwtsel_D [1:0] $end
$var wire 4 N' i_hw_store_s_id_aluop_D [3:0] $end
$var wire 2 O' i_hw_store_s_id_alusrc1_D [1:0] $end
$var wire 1 P' i_hw_store_s_id_alusrc2_D $end
$var wire 3 Q' i_hw_store_s_id_immsel_D [2:0] $end
$var wire 3 R' i_hw_store_s_id_brnchop_D [2:0] $end
$var wire 1 S' i_hw_store_s_id_brnchsel_D $end
$var wire 4 T' i_hw_store_s_id_memop_D [3:0] $end
$var wire 4 U' i_hw_store_s_id_memop_D_ACT [3:0] $end
$var wire 1 V' i_hw_branch_s_id_regwrite_D $end
$var wire 2 W' i_hw_branch_s_id_rfwtsel_D [1:0] $end
$var wire 4 X' i_hw_branch_s_id_aluop_D [3:0] $end
$var wire 4 Y' i_hw_branch_s_id_aluop_D_ACT [3:0] $end
$var wire 3 Z' i_hw_branch_s_id_brnchop_D [2:0] $end
$var wire 3 [' i_hw_branch_s_id_brnchop_D_ACT [2:0] $end
$var wire 2 \' i_hw_branch_s_id_alusrc1_D [1:0] $end
$var wire 1 ]' i_hw_branch_s_id_alusrc2_D $end
$var wire 3 ^' i_hw_branch_s_id_immsel_D [2:0] $end
$var wire 1 _' i_hw_branch_s_id_brnchsel_D $end
$var wire 4 `' i_hw_branch_s_id_memop_D [3:0] $end
$var wire 1 a' i_hw_upper_imm_s_id_regwrite_D $end
$var wire 2 b' i_hw_upper_imm_s_id_rfwtsel_D [1:0] $end
$var wire 4 c' i_hw_upper_imm_s_id_aluop_D [3:0] $end
$var wire 2 d' i_hw_upper_imm_s_id_alusrc1_D [1:0] $end
$var wire 2 e' i_hw_upper_imm_s_id_alusrc1_D_ACT [1:0] $end
$var wire 1 f' i_hw_upper_imm_s_id_alusrc2_D $end
$var wire 3 g' i_hw_upper_imm_s_id_immsel_D [2:0] $end
$var wire 3 h' i_hw_upper_imm_s_id_brnchop_D [2:0] $end
$var wire 1 i' i_hw_upper_imm_s_id_brnchsel_D $end
$var wire 4 j' i_hw_upper_imm_s_id_memop_D [3:0] $end
$var wire 10 k' opc_lb_codasip_return_MI15opc_itype_loadsIH4_2id2id5_3dec3dec18_15opc_itype_loads3opc_D [9:0] $end
$var wire 10 l' opc_lh_codasip_return_MI15opc_itype_loadsIH4_2id2id5_3dec3dec18_15opc_itype_loads3opc_D [9:0] $end
$var wire 10 m' opc_lw_codasip_return_MI15opc_itype_loadsIH4_2id2id5_3dec3dec18_15opc_itype_loads3opc_D [9:0] $end
$var wire 17 n' opc_or_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 10 o' opc_sb_codasip_return_MI15opc_stype_storeIH4_2id2id5_3dec3dec18_15opc_stype_store3opc_D [9:0] $end
$var wire 10 p' opc_sh_codasip_return_MI15opc_stype_storeIH4_2id2id5_3dec3dec18_15opc_stype_store3opc_D [9:0] $end
$var wire 10 q' opc_sw_codasip_return_MI15opc_stype_storeIH4_2id2id5_3dec3dec18_15opc_stype_store3opc_D [9:0] $end
$var wire 17 r' opc_add_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 s' opc_and_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 10 t' opc_beq_codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc_D [9:0] $end
$var wire 10 u' opc_bge_codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc_D [9:0] $end
$var wire 10 v' opc_blt_codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc_D [9:0] $end
$var wire 10 w' opc_bne_codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc_D [9:0] $end
$var wire 10 x' opc_lbu_codasip_return_MI15opc_itype_loadsIH4_2id2id5_3dec3dec18_15opc_itype_loads3opc_D [9:0] $end
$var wire 10 y' opc_lhu_codasip_return_MI15opc_itype_loadsIH4_2id2id5_3dec3dec18_15opc_itype_loads3opc_D [9:0] $end
$var wire 7 z' opc_lui_codasip_return_MI13opc_utype_opsIH4_2id2id5_3dec3dec16_13opc_utype_ops3opc_D [6:0] $end
$var wire 10 {' opc_ori_codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc_D [9:0] $end
$var wire 17 |' opc_sll_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 }' opc_slt_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 ~' opc_sra_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 !( opc_srl_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 "( opc_sub_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 #( opc_xor_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 1 $( i_hw_alu_s_id_regwrite_D $end
$var wire 2 %( i_hw_alu_s_id_rfwtsel_D [1:0] $end
$var wire 4 &( i_hw_alu_s_id_aluop_D [3:0] $end
$var wire 4 '( i_hw_alu_s_id_aluop_D_ACT [3:0] $end
$var wire 2 (( i_hw_alu_s_id_alusrc1_D [1:0] $end
$var wire 1 )( i_hw_alu_s_id_alusrc2_D $end
$var wire 3 *( i_hw_alu_s_id_immsel_D [2:0] $end
$var wire 3 +( i_hw_alu_s_id_brnchop_D [2:0] $end
$var wire 1 ,( i_hw_alu_s_id_brnchsel_D $end
$var wire 4 -( i_hw_alu_s_id_memop_D [3:0] $end
$var wire 1 .( i_hw_jal_s_id_regwrite_D $end
$var wire 2 /( i_hw_jal_s_id_rfwtsel_D [1:0] $end
$var wire 4 0( i_hw_jal_s_id_aluop_D [3:0] $end
$var wire 2 1( i_hw_jal_s_id_alusrc1_D [1:0] $end
$var wire 1 2( i_hw_jal_s_id_alusrc2_D $end
$var wire 3 3( i_hw_jal_s_id_immsel_D [2:0] $end
$var wire 3 4( i_hw_jal_s_id_brnchop_D [2:0] $end
$var wire 1 5( i_hw_jal_s_id_brnchsel_D $end
$var wire 4 6( i_hw_jal_s_id_memop_D [3:0] $end
$var wire 10 7( opc_addi_codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc_D [9:0] $end
$var wire 10 8( opc_andi_codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc_D [9:0] $end
$var wire 10 9( opc_bgeu_codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc_D [9:0] $end
$var wire 10 :( opc_bltu_codasip_return_MI18opc_btype_branchesIH4_2id2id5_3dec3dec21_18opc_btype_branches3opc_D [9:0] $end
$var wire 17 ;( opc_slli_codasip_return_MI17opc_itype_specialIH4_2id2id5_3dec3dec20_17opc_itype_special3opc_D [16:0] $end
$var wire 10 <( opc_slti_codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc_D [9:0] $end
$var wire 17 =( opc_sltu_codasip_return_MI13opc_rtype_aluIH4_2id2id5_3dec3dec16_13opc_rtype_alu3opc_D [16:0] $end
$var wire 17 >( opc_srai_codasip_return_MI17opc_itype_specialIH4_2id2id5_3dec3dec20_17opc_itype_special3opc_D [16:0] $end
$var wire 17 ?( opc_srli_codasip_return_MI17opc_itype_specialIH4_2id2id5_3dec3dec20_17opc_itype_special3opc_D [16:0] $end
$var wire 10 @( opc_xori_codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc_D [9:0] $end
$var wire 1 A( i_hw_halt_s_id_regwrite_D $end
$var wire 2 B( i_hw_halt_s_id_rfwtsel_D [1:0] $end
$var wire 4 C( i_hw_halt_s_id_aluop_D [3:0] $end
$var wire 2 D( i_hw_halt_s_id_alusrc1_D [1:0] $end
$var wire 1 E( i_hw_halt_s_id_alusrc2_D $end
$var wire 3 F( i_hw_halt_s_id_immsel_D [2:0] $end
$var wire 3 G( i_hw_halt_s_id_brnchop_D [2:0] $end
$var wire 1 H( i_hw_halt_s_id_brnchsel_D $end
$var wire 4 I( i_hw_halt_s_id_memop_D [3:0] $end
$var wire 1 J( i_hw_jalr_s_id_regwrite_D $end
$var wire 2 K( i_hw_jalr_s_id_rfwtsel_D [1:0] $end
$var wire 4 L( i_hw_jalr_s_id_aluop_D [3:0] $end
$var wire 2 M( i_hw_jalr_s_id_alusrc1_D [1:0] $end
$var wire 1 N( i_hw_jalr_s_id_alusrc2_D $end
$var wire 3 O( i_hw_jalr_s_id_immsel_D [2:0] $end
$var wire 3 P( i_hw_jalr_s_id_brnchop_D [2:0] $end
$var wire 1 Q( i_hw_jalr_s_id_brnchsel_D $end
$var wire 4 R( i_hw_jalr_s_id_memop_D [3:0] $end
$var wire 1 S( i_hw_load_s_id_regwrite_D $end
$var wire 2 T( i_hw_load_s_id_rfwtsel_D [1:0] $end
$var wire 4 U( i_hw_load_s_id_aluop_D [3:0] $end
$var wire 2 V( i_hw_load_s_id_alusrc1_D [1:0] $end
$var wire 1 W( i_hw_load_s_id_alusrc2_D $end
$var wire 3 X( i_hw_load_s_id_immsel_D [2:0] $end
$var wire 3 Y( i_hw_load_s_id_brnchop_D [2:0] $end
$var wire 1 Z( i_hw_load_s_id_brnchsel_D $end
$var wire 4 [( i_hw_load_s_id_memop_D [3:0] $end
$var wire 4 \( i_hw_load_s_id_memop_D_ACT [3:0] $end
$var wire 7 ]( opc_auipc_codasip_return_MI13opc_utype_opsIH4_2id2id5_3dec3dec16_13opc_utype_ops3opc_D [6:0] $end
$var wire 10 ^( opc_sltiu_codasip_return_MI13opc_itype_aluIH4_2id2id5_3dec3dec16_13opc_itype_alu3opc_D [9:0] $end
$upscope $end
$scope module pipe $end
$var wire 1 G$ EX_CLEAR_D $end
$var wire 1 H$ EX_STALL_D $end
$var wire 1 I$ ID_CLEAR_D $end
$var wire 1 J$ ID_STALL_D $end
$var wire 1 K$ ME_CLEAR_D $end
$var wire 1 L$ ME_STALL_D $end
$var wire 1 M$ WB_CLEAR_D $end
$var wire 1 N$ WB_STALL_D $end
$var wire 1 +# EX_CLEAR_Q $end
$var wire 1 ,# EX_STALL_Q $end
$var wire 1 z" ID_CLEAR_Q $end
$var wire 1 {" ID_STALL_Q $end
$var wire 1 Z# ME_CLEAR_Q $end
$var wire 1 [# ME_STALL_Q $end
$var wire 1 z# WB_CLEAR_Q $end
$var wire 1 {# WB_STALL_Q $end
$upscope $end
$scope module codasip_startup_ctrl $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 ]$ main_ACT $end
$var wire 1 P$ reset_ACT $end
$var wire 1 _( main_ACT_reg_D $end
$var wire 1 `( main_ACT_reg_Q $end
$var wire 1 a( reset_ACT_reg_D $end
$var wire 1 b( reset_ACT_reg_Q $end
$scope module main_ACT_reg $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 _( D [0:0] $end
$var wire 1 `( Q [0:0] $end
$var reg 1 c( Q_reg [0:0] $end
$upscope $end
$scope module reset_ACT_reg $end
$var wire 1 # CLK $end
$var wire 1 +" RST $end
$var wire 1 a( D [0:0] $end
$var wire 1 b( Q [0:0] $end
$var reg 1 d( Q_reg [0:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module inst_mem $end
$var wire 1 e( HRESETn $end
$var wire 1 # HCLK $end
$var wire 1 f( HSEL $end
$var wire 32 I HADDR [31:0] $end
$var wire 32 F HWDATA [31:0] $end
$var reg 32 g( HRDATA [31:0] $end
$var wire 1 K HWRITE $end
$var wire 3 E HSIZE [2:0] $end
$var wire 3 C HBURST [2:0] $end
$var wire 4 D HPROT [3:0] $end
$var wire 2 L HTRANS [1:0] $end
$var reg 1 h( HREADYOUT $end
$var wire 1 A HREADY $end
$var wire 1 B HRESP $end
$var reg 1 i( ahb_write $end
$var reg 1 j( ahb_read $end
$var reg 1 k( ahb_noseq $end
$var reg 1 l( was_ahb_noseq $end
$var reg 1 m( we $end
$var reg 4 n( be [3:0] $end
$var reg 12 o( raddr [11:0] $end
$var reg 12 p( waddr [11:0] $end
$var reg 32 q( nxt_adr [31:0] $end
$var reg 1 r( contention $end
$var reg 1 s( use_local_dout $end
$var reg 32 t( dout [31:0] $end
$var reg 32 u( dout_local [31:0] $end
$scope module ram_inst $end
$var wire 1 e( rst_ni $end
$var wire 1 # clk_i $end
$var wire 12 v( waddr_i [11:0] $end
$var wire 32 F din_i [31:0] $end
$var wire 1 w( we_i $end
$var wire 4 x( be_i [3:0] $end
$var wire 12 y( raddr_i [11:0] $end
$var wire 1 f( re_i $end
$var wire 32 z( dout_o [31:0] $end
$var reg 1 {( contention $end
$var reg 1 |( contention_reg $end
$var reg 32 }( mem_dout [31:0] $end
$var reg 32 ~( din_dly [31:0] $end
$scope module genblk1.ram_inst $end
$var wire 1 e( rst_ni $end
$var wire 1 # clk_i $end
$var wire 12 v( waddr_i [11:0] $end
$var wire 32 F din_i [31:0] $end
$var wire 1 w( we_i $end
$var wire 4 x( be_i [3:0] $end
$var wire 12 y( raddr_i [11:0] $end
$var reg 32 }( dout_o [31:0] $end
$upscope $end
$upscope $end
$scope function address_offset $end
$upscope $end
$scope function gen_be $end
$upscope $end
$scope function gen_nxt_adr_incr $end
$upscope $end
$scope function gen_nxt_adr_wrap $end
$upscope $end
$scope function gen_nxt_adr $end
$upscope $end
$scope function gen_val $end
$upscope $end
$upscope $end
$scope module main_mem $end
$var wire 1 !) HRESETn $end
$var wire 1 # HCLK $end
$var wire 1 f( HSEL $end
$var wire 32 P HADDR [31:0] $end
$var wire 32 O HWDATA [31:0] $end
$var reg 32 ") HRDATA [31:0] $end
$var wire 1 W HWRITE $end
$var wire 3 U HSIZE [2:0] $end
$var wire 3 S HBURST [2:0] $end
$var wire 4 T HPROT [3:0] $end
$var wire 2 X HTRANS [1:0] $end
$var reg 1 #) HREADYOUT $end
$var wire 1 Q HREADY $end
$var wire 1 R HRESP $end
$var reg 1 $) ahb_write $end
$var reg 1 %) ahb_read $end
$var reg 1 &) ahb_noseq $end
$var reg 1 ') was_ahb_noseq $end
$var reg 1 () we $end
$var reg 4 )) be [3:0] $end
$var reg 12 *) raddr [11:0] $end
$var reg 12 +) waddr [11:0] $end
$var reg 32 ,) nxt_adr [31:0] $end
$var reg 1 -) contention $end
$var reg 1 .) use_local_dout $end
$var reg 32 /) dout [31:0] $end
$var reg 32 0) dout_local [31:0] $end
$scope module ram_inst $end
$var wire 1 !) rst_ni $end
$var wire 1 # clk_i $end
$var wire 12 1) waddr_i [11:0] $end
$var wire 32 O din_i [31:0] $end
$var wire 1 2) we_i $end
$var wire 4 3) be_i [3:0] $end
$var wire 12 4) raddr_i [11:0] $end
$var wire 1 f( re_i $end
$var wire 32 5) dout_o [31:0] $end
$var reg 1 6) contention $end
$var reg 1 7) contention_reg $end
$var reg 32 8) mem_dout [31:0] $end
$var reg 32 9) din_dly [31:0] $end
$scope module genblk1.ram_inst $end
$var wire 1 !) rst_ni $end
$var wire 1 # clk_i $end
$var wire 12 1) waddr_i [11:0] $end
$var wire 32 O din_i [31:0] $end
$var wire 1 2) we_i $end
$var wire 4 3) be_i [3:0] $end
$var wire 12 4) raddr_i [11:0] $end
$var reg 32 8) dout_o [31:0] $end
$upscope $end
$upscope $end
$scope function address_offset $end
$upscope $end
$scope function gen_be $end
$upscope $end
$scope function gen_nxt_adr_incr $end
$upscope $end
$scope function gen_nxt_adr_wrap $end
$upscope $end
$scope function gen_nxt_adr $end
$upscope $end
$scope function gen_val $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
1!
b0 !!
b10000110 !"
bx !#
x!$
bx !%
bx !&
x!'
b0x0x0xx00xx !(
1!)
1"
b0 "!
bx ""
bx "#
x"$
x"%
bx "&
x"'
b0x000000000xx00xx "(
bx ")
1#
b0 #!
bx #"
bx ##
x#$
x#%
bx #&
x#'
b0x000xx00xx #(
1#)
1$
0$!
x$"
bx $#
x$$
bx $%
bx $&
x$'
x$(
x$)
bz %
b1 %!
0%"
x%#
bx %$
x%%
x%&
x%'
b0 %(
x%)
bz &
b0 &!
b0 &"
bx &#
bx &$
0&%
x&&
x&'
bx &(
x&)
bx '
b1 '!
b0 '"
bx '#
x'$
0'%
b0x00000xxx0xx00xx '&
x''
bx '(
x')
bz (
b1000000000 (!
b0 ("
x(#
bx ($
x(%
bx00x00xx (&
x('
b0 ((
0()
bz )
b110100 )!
bx )"
bx )#
bx )$
0)%
b0xx0xxx )&
x)'
0)(
bx ))
bz *
0*!
bx *"
bx *#
x*$
x*%
b0x00000x0x00x00xx *&
x*'
b0 *(
bx *)
bz +
0+!
1+"
x+#
bx +$
0+%
bx000xx +&
x+'
b0 +(
bx +)
z,
b0 ,!
0,"
0,#
bx ,$
0,%
bx00000xx ,&
x,'
0,(
bx ,)
0-
b0 -!
bx00 -"
x-#
x-$
bx -%
b0xx0x000xx -&
x-'
b0 -(
x-)
z.
b0 .!
b0 ."
bx .#
bx .$
x.%
x.&
x.'
x.(
x.)
z/
b0 /!
0/"
bx /#
bx /$
bx /%
x/&
x/'
b0x /(
bx /)
10
b0 0!
b0 0"
x0#
x0$
bx 0%
x0&
x0'
b0 0(
bx 0)
11
b0 1!
b10 1"
bx 1#
01$
bx 1%
x1&
x1'
bx0 1(
bx 1)
z2
b0 2!
bx0 2"
bx 2#
x2$
bx 2%
x2&
x2'
x2(
02)
b0 3
b0 3!
03"
x3#
x3$
bx 3%
x3&
x3'
bx0x 3(
bx 3)
bx 4
04!
14"
bx 4#
x4$
x4%
x4&
x4'
b0x 4(
bx 4)
b0 5
b0 5!
05"
bx 5#
x5$
bx 5%
x5&
x5'
05(
bx 5)
06
b0 6!
bx 6"
x6#
x6$
bx 6%
x6&
x6'
b0 6(
06)
b0 7
b0 7!
bx 7"
x7#
x7$
bx 7%
x7&
x7'
b0x00xx 7(
x7)
b0 8
08!
b0 8"
x8#
x8$
x8%
x8&
x8'
bx00x00xx 8(
bx 8)
b0 9
09!
09"
x9#
bx 9$
bx 9%
x9&
b0 9'
bx000xx 9(
bx 9)
b1000000000000 :
0:!
b11 :"
x:#
b0x000000000000 :$
bx :%
x:&
b0xxx :'
bx0xx000xx :(
b0 ;
0;!
b0xx ;"
x;#
bx ;$
bx ;%
x;&
b0xxx ;'
b0x00x00xx ;(
1<
0<!
bx <"
x<#
bx <$
bx <%
x<&
b0 <'
b0x000x00xx <(
b10 =
0=!
x="
bx =#
x=$
x=%
x=&
x='
b0xx0xx00xx =(
1>
0>!
bx >"
bx >#
bx >$
bx >%
x>&
b0x >'
b0x00000x0x00x00xx >(
b0 ?
0?!
1?"
x?#
x?$
bx ?%
x?&
b0 ?'
b0x0x00x00xx ?(
bx @
b0 @!
0@"
bx @#
bx @$
0@%
x@&
0@'
bx0000x00xx @(
1A
b0 A!
bx A"
bx A#
xA$
1A%
xA&
b0 A'
0A(
0B
b0 B!
bx B"
xB#
bx B$
0B%
xB&
xB'
b0 B(
b0 C
b0 C!
bx C"
xC#
bx C$
bx C%
xC&
b0 C'
b0 C(
b0 D
b0 D!
bx D"
xD#
bx D$
bx D%
xD&
bx0xx D'
b0 D(
b10 E
b0 E!
bx E"
xE#
bx E$
bx E%
xE&
bx0xx E'
0E(
b0 F
b0 F!
bx F"
bx F#
xF$
0F%
xF&
b0 F'
b0 F(
0G
b0 G!
bx G"
bx G#
xG$
bx G%
xG&
xG'
b0 G(
bx00 H
b0 H!
xH"
xH#
0H$
bx H%
xH&
b0x H'
0H(
b1000000000000 I
b0 I!
xI"
bx I#
0I$
xI%
xI&
b0 I'
b0 I(
0J
b0 J!
bx J"
bx J#
xJ$
xJ%
xJ&
0J'
xJ(
1K
b0 K!
bx K"
xK#
xK$
xK%
xK&
b0 K'
b0x K(
b10 L
b0 L!
xL"
bx L#
0L$
xL%
xL&
0L'
b0x L(
bx0 M
bx M!
bx M"
bx M#
0M$
xM%
xM&
bx0 M'
b0 M(
bx N
0N!
bx N"
xN#
0N$
xN%
xN&
b0x N'
xN(
bx O
b0 O!
bx O"
bx O#
xO$
xO%
xO&
b0 O'
b0x O(
bx P
1P!
bx P"
bx P#
xP$
bx P%
xP&
xP'
b0x P(
1Q
0Q!
bx Q"
xQ#
xQ$
bx Q%
xQ&
bx00 Q'
xQ(
0R
b0 R!
b0 R"
b0 R#
xR$
bx R%
xR&
b0 R'
b0 R(
b0 S
b0 S!
bx S"
bx S#
xS$
xS%
xS&
0S'
xS(
b11 T
0T!
bx0 T"
xT#
xT$
bx T%
xT&
b0xx T'
bx0 T(
b0xx U
b0 U!
bx000000000000 U"
bx U#
xU$
bx U%
xU&
b0xx U'
b0x U(
0V
b0 V!
bx V"
bx V#
xV$
bx V%
xV&
0V'
b0 V(
xW
b0 W!
bx0 W"
xW#
xW$
bx W%
xW&
b0 W'
xW(
bx X
b1100000 X!
bx X"
bx X#
xX$
bx X%
xX&
b0xxx X'
b0x X(
bx Y
b0 Y!
bx Y"
bx Y#
xY$
bx Y%
xY&
b0xxx Y'
b0 Y(
0Z
0Z!
bx Z"
xZ#
xZ$
bx Z%
xZ&
bx Z'
0Z(
b0 [
0[!
bx ["
0[#
bx [$
bx [%
x[&
bx ['
bx [(
b0 \
0\!
x\"
x\#
x\$
bx \%
x\&
b0 \'
bx \(
b0 ]
0]!
x]"
bx ]#
x]$
bx ]%
x]&
0]'
b0x0xxx ](
0^
bx ^!
x^"
bx ^#
bx ^$
x^%
x^&
b0x0 ^'
b0xx00x00xx ^(
0_
0_!
bx _"
x_#
bx _$
bx _%
x_&
0_'
x_(
1`
b0 `!
bx `"
x`#
bx `$
bx `%
x`&
b0 `'
x`(
1a
b0 a!
bx a"
xa#
bx a$
bx a%
xa&
xa'
xa(
0b
b0 b!
xb"
xb#
bx b$
bx b%
bx00x00xx b&
b0 b'
xb(
0c
xc!
bx c"
bx c#
bx c$
xc%
b0x00000x0x00x00xx c&
b0x c'
xc(
b0 d
b0 d!
bx d"
bx d#
xd$
bx d%
b0xx0x000xx d&
bx d'
xd(
bx0100110101011001010111110101000001010010010011110100011101010010010000010100110100101110010011010100010101001101 e
b0 e!
bx e"
xe#
xe$
bx00 e%
bx000xx e&
bx e'
1e(
0f
0f!
bx f"
bx f#
bx f$
b0 f%
b0xx0xxx f&
xf'
1f(
b0 g
b1100000 g!
bx g"
bx g#
bx g$
xg%
b0x00000xxx0xx00xx g&
b0xx g'
bx g(
0h
0h!
bx h"
xh#
xh$
xh%
bx00000xx h&
b0 h'
1h(
0i
b0 i!
bx i"
bx i#
bx i$
bx i%
xi&
0i'
1i(
b0 j
b0 j!
bx j"
bx j#
bx j$
1j%
xj&
b0 j'
0j(
b0 k
b0 k!
xk"
xk#
bx k$
0k%
xk&
b0xx k'
1k(
b0 l
0l!
xl"
bx l#
bx l$
xl%
xl&
b0x00000xx l'
1l(
b0 m
0m!
bx m"
bx m#
bx m$
xm%
xm&
b0x000000xx m'
0m(
b0 n
0n!
bx n"
xn#
bx n$
xn%
xn&
b0xx00xx00xx n'
bx n(
b0 o
0o!
xo"
xo#
bx o$
xo%
xo&
b0x000xx o'
b10000000000 o(
b0 p
0p!
bx p"
xp#
bx p$
xp%
xp&
b0x0x000xx p'
bx p(
b0 q
1q!
bx q"
xq#
xq$
xq%
xq&
b0x00x000xx q'
b1000000000100 q(
b0 r
zr!
xr"
bx r#
bx r$
bx r%
xr&
b0xx00xx r'
0r(
b0 s
b0 s!
0s"
bx s#
bx s$
bx s%
xs&
b0xxx0xx00xx s'
xs(
b0 t
b0 t!
0t"
xt#
bx t$
xt%
xt&
b0xx000xx t'
bx t(
b0 u
b0 u!
xu"
bx u#
bx u$
xu%
xu&
bx0xxx000xx u'
bx u(
b0 v
b1111010000000000000000000000000000000000000000000001 v!
0v"
bx v#
xv$
b0 v%
xv&
bx00xx000xx v'
bx v(
b0 w
xw!
xw"
xw#
bx w$
bx w%
xw&
b0xxx000xx w'
0w(
b0 x
bx x!
0x"
bx x#
bx x$
bx x%
xx&
bx0000000xx x'
bx x(
b0 y
bx y!
0y"
bx y#
bx y$
bx y%
xy&
bx0x00000xx y'
b10000000000 y(
b0 z
b1100001 z!
0z"
0z#
bx z$
bx z%
xz&
b0xx0xxx z'
bx z(
b0 {
b1 {!
x{"
0{#
x{$
bx {%
x{&
bx000x00xx {'
0{(
b0 |
b0 |!
x|"
x|#
bx |$
b0 |%
x|&
b0x0xx00xx |'
x|(
b0 }
b110011 }!
x}"
bx }#
bx }$
bx }%
x}&
b0x00xx00xx }'
bx }(
b0 ~
b11111010 ~!
x~"
bx ~#
bx ~$
bx ~%
x~&
b0x00000x0x0xx00xx ~'
b0 ~(
$end

#100000
0!
0#

#200000
1!
1#
1%"
b1111101000000000 &"
x()
0-)
0.)
x2)
x6)
07)
1N!
1T!
b1111101000000000 U!
0c!
1f
1h!
b1111101000000000 i!
1m(
b1111 n(
b10000000000 p(
0s(
b10000000000 v(
1w(
b1111 x(
b10 {!
1{(
0|(

#300000
0!
0#

#400000
1!
1#
1%"
b1111101000000000 &"
x-)
x.)
b0 6"
x7)
b0 @
1T!
b1111101000000000 U!
1Z!
1f
b0 g(
1l!
b0 s%
1s(
b0 t(
b0 u(
b0 z(
b11 {!
b1111101000000000 |!
1|(

#500000
0!
0#

#600000
1!
1#
0%"
b0 &"
0T!
b0 U!
1f
0h!
b0 i!
b100 {!
b0 }(

#700000
0!
0#

#800000
1!
1#
1f
b101 {!

#900000
0!
0#
